{"version":3,"file":"static/js/789.e5eced74.chunk.js","mappings":"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","sources":["../node_modules/music-metadata/lib/ebml/types.js","../node_modules/music-metadata/lib/matroska/MatroskaDtd.js","../node_modules/music-metadata/lib/ebml/EbmlIterator.js","../node_modules/music-metadata/lib/matroska/MatroskaParser.js"],"sourcesContent":["export const DataType = {\n    string: 0,\n    uint: 1,\n    uid: 2,\n    bool: 3,\n    binary: 4,\n    float: 5,\n};\n//# sourceMappingURL=types.js.map","import { DataType } from '../ebml/types.js';\n/**\n * Elements of document type description\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\n * Extended with:\n * - https://www.matroska.org/technical/specs/index.html\n */\nexport const matroskaDtd = {\n    name: 'dtd',\n    container: {\n        0x1a45dfa3: {\n            name: 'ebml',\n            container: {\n                0x4286: { name: 'ebmlVersion', value: DataType.uint }, // 5.1.1\n                0x42f7: { name: 'ebmlReadVersion', value: DataType.uint }, // 5.1.2\n                0x42f2: { name: 'ebmlMaxIDWidth', value: DataType.uint }, // 5.1.3\n                0x42f3: { name: 'ebmlMaxSizeWidth', value: DataType.uint }, // 5.1.4\n                0x4282: { name: 'docType', value: DataType.string }, // 5.1.5\n                0x4287: { name: 'docTypeVersion', value: DataType.uint }, // 5.1.6\n                0x4285: { name: 'docTypeReadVersion', value: DataType.uint } // 5.1.7\n            }\n        },\n        // Matroska segments\n        0x18538067: {\n            name: 'segment',\n            container: {\n                // Meta Seek Information (also known as MetaSeek)\n                0x114d9b74: {\n                    name: 'seekHead',\n                    container: {\n                        0x4dbb: {\n                            name: 'seek',\n                            multiple: true,\n                            container: {\n                                0x53ab: { name: 'id', value: DataType.binary },\n                                0x53ac: { name: 'position', value: DataType.uint }\n                            }\n                        }\n                    }\n                },\n                // Segment Information\n                0x1549a966: {\n                    name: 'info',\n                    container: {\n                        0x73a4: { name: 'uid', value: DataType.uid },\n                        0x7384: { name: 'filename', value: DataType.string },\n                        0x3cb923: { name: 'prevUID', value: DataType.uid },\n                        0x3c83ab: { name: 'prevFilename', value: DataType.string },\n                        0x3eb923: { name: 'nextUID', value: DataType.uid },\n                        0x3e83bb: { name: 'nextFilename', value: DataType.string },\n                        0x2ad7b1: { name: 'timecodeScale', value: DataType.uint },\n                        0x4489: { name: 'duration', value: DataType.float },\n                        0x4461: { name: 'dateUTC', value: DataType.uint },\n                        0x7ba9: { name: 'title', value: DataType.string },\n                        0x4d80: { name: 'muxingApp', value: DataType.string },\n                        0x5741: { name: 'writingApp', value: DataType.string }\n                    }\n                },\n                // Cluster\n                0x1f43b675: {\n                    name: 'cluster',\n                    multiple: true,\n                    container: {\n                        0xe7: { name: 'timecode', value: DataType.uid },\n                        0x58d7: { name: 'silentTracks ', multiple: true },\n                        0xa7: { name: 'position', value: DataType.uid },\n                        0xab: { name: 'prevSize', value: DataType.uid },\n                        0xa0: { name: 'blockGroup' },\n                        0xa3: { name: 'simpleBlock' }\n                    }\n                },\n                // Track\n                0x1654ae6b: {\n                    name: 'tracks',\n                    container: {\n                        0xae: {\n                            name: 'entries',\n                            multiple: true,\n                            container: {\n                                0xd7: { name: 'trackNumber', value: DataType.uint },\n                                0x73c5: { name: 'uid', value: DataType.uid },\n                                0x83: { name: 'trackType', value: DataType.uint },\n                                0xb9: { name: 'flagEnabled', value: DataType.bool },\n                                0x88: { name: 'flagDefault', value: DataType.bool },\n                                0x55aa: { name: 'flagForced', value: DataType.bool }, // extended\n                                0x9c: { name: 'flagLacing', value: DataType.bool },\n                                0x6de7: { name: 'minCache', value: DataType.uint },\n                                0x6de8: { name: 'maxCache', value: DataType.uint },\n                                0x23e383: { name: 'defaultDuration', value: DataType.uint },\n                                0x23314f: { name: 'timecodeScale', value: DataType.float },\n                                0x536e: { name: 'name', value: DataType.string },\n                                0x22b59c: { name: 'language', value: DataType.string },\n                                0x86: { name: 'codecID', value: DataType.string },\n                                0x63a2: { name: 'codecPrivate', value: DataType.binary },\n                                0x258688: { name: 'codecName', value: DataType.string },\n                                0x3a9697: { name: 'codecSettings', value: DataType.string },\n                                0x3b4040: { name: 'codecInfoUrl', value: DataType.string },\n                                0x26b240: { name: 'codecDownloadUrl', value: DataType.string },\n                                0xaa: { name: 'codecDecodeAll', value: DataType.bool },\n                                0x6fab: { name: 'trackOverlay', value: DataType.uint },\n                                // Video\n                                0xe0: {\n                                    name: 'video',\n                                    container: {\n                                        0x9a: { name: 'flagInterlaced', value: DataType.bool },\n                                        0x53b8: { name: 'stereoMode', value: DataType.uint },\n                                        0xb0: { name: 'pixelWidth', value: DataType.uint },\n                                        0xba: { name: 'pixelHeight', value: DataType.uint },\n                                        0x54b0: { name: 'displayWidth', value: DataType.uint },\n                                        0x54ba: { name: 'displayHeight', value: DataType.uint },\n                                        0x54b3: { name: 'aspectRatioType', value: DataType.uint },\n                                        0x2eb524: { name: 'colourSpace', value: DataType.uint },\n                                        0x2fb523: { name: 'gammaValue', value: DataType.float }\n                                    }\n                                },\n                                // Audio\n                                0xe1: {\n                                    name: 'audio',\n                                    container: {\n                                        0xb5: { name: 'samplingFrequency', value: DataType.float },\n                                        0x78b5: { name: 'outputSamplingFrequency', value: DataType.float },\n                                        0x9f: { name: 'channels', value: DataType.uint }, // https://www.matroska.org/technical/specs/index.html\n                                        0x94: { name: 'channels', value: DataType.uint },\n                                        0x7d7b: { name: 'channelPositions', value: DataType.binary },\n                                        0x6264: { name: 'bitDepth', value: DataType.uint }\n                                    }\n                                },\n                                // Content Encoding\n                                0x6d80: {\n                                    name: 'contentEncodings',\n                                    container: {\n                                        0x6240: {\n                                            name: 'contentEncoding',\n                                            container: {\n                                                0x5031: { name: 'order', value: DataType.uint },\n                                                0x5032: { name: 'scope', value: DataType.bool },\n                                                0x5033: { name: 'type', value: DataType.uint },\n                                                0x5034: {\n                                                    name: 'contentEncoding',\n                                                    container: {\n                                                        0x4254: { name: 'contentCompAlgo', value: DataType.uint },\n                                                        0x4255: { name: 'contentCompSettings', value: DataType.binary }\n                                                    }\n                                                },\n                                                0x5035: {\n                                                    name: 'contentEncoding',\n                                                    container: {\n                                                        0x47e1: { name: 'contentEncAlgo', value: DataType.uint },\n                                                        0x47e2: { name: 'contentEncKeyID', value: DataType.binary },\n                                                        0x47e3: { name: 'contentSignature ', value: DataType.binary },\n                                                        0x47e4: { name: 'ContentSigKeyID  ', value: DataType.binary },\n                                                        0x47e5: { name: 'contentSigAlgo ', value: DataType.uint },\n                                                        0x47e6: { name: 'contentSigHashAlgo ', value: DataType.uint }\n                                                    }\n                                                },\n                                                0x6264: { name: 'bitDepth', value: DataType.uint }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Cueing Data\n                0x1c53bb6b: {\n                    name: 'cues',\n                    container: {\n                        0xbb: {\n                            name: 'cuePoint',\n                            container: {\n                                0xb3: { name: 'cueTime', value: DataType.uid },\n                                0xb7: {\n                                    name: 'positions',\n                                    container: {\n                                        0xf7: { name: 'track', value: DataType.uint },\n                                        0xf1: { name: 'clusterPosition', value: DataType.uint },\n                                        0x5378: { name: 'blockNumber', value: DataType.uint },\n                                        0xea: { name: 'codecState', value: DataType.uint },\n                                        0xdb: {\n                                            name: 'reference', container: {\n                                                0x96: { name: 'time', value: DataType.uint },\n                                                0x97: { name: 'cluster', value: DataType.uint },\n                                                0x535f: { name: 'number', value: DataType.uint },\n                                                0xeb: { name: 'codecState', value: DataType.uint }\n                                            }\n                                        },\n                                        0xf0: { name: 'relativePosition', value: DataType.uint } // extended\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Attachment\n                0x1941a469: {\n                    name: 'attachments',\n                    container: {\n                        0x61a7: {\n                            name: 'attachedFiles',\n                            multiple: true,\n                            container: {\n                                0x467e: { name: 'description', value: DataType.string },\n                                0x466e: { name: 'name', value: DataType.string },\n                                0x4660: { name: 'mimeType', value: DataType.string },\n                                0x465c: { name: 'data', value: DataType.binary },\n                                0x46ae: { name: 'uid', value: DataType.uid }\n                            }\n                        }\n                    }\n                },\n                // Chapters\n                0x1043a770: {\n                    name: 'chapters',\n                    container: {\n                        0x45b9: {\n                            name: 'editionEntry',\n                            container: {\n                                0xb6: {\n                                    name: 'chapterAtom',\n                                    container: {\n                                        0x73c4: { name: 'uid', value: DataType.uid },\n                                        0x91: { name: 'timeStart', value: DataType.uint },\n                                        0x92: { name: 'timeEnd', value: DataType.uid },\n                                        0x98: { name: 'hidden', value: DataType.bool },\n                                        0x4598: { name: 'enabled', value: DataType.uid },\n                                        0x8f: {\n                                            name: 'track', container: {\n                                                0x89: { name: 'trackNumber', value: DataType.uid },\n                                                0x80: {\n                                                    name: 'display', container: {\n                                                        0x85: { name: 'string', value: DataType.string },\n                                                        0x437c: { name: 'language ', value: DataType.string },\n                                                        0x437e: { name: 'country ', value: DataType.string }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                // Tagging\n                0x1254c367: {\n                    name: 'tags',\n                    container: {\n                        0x7373: {\n                            name: 'tag',\n                            multiple: true,\n                            container: {\n                                0x63c0: {\n                                    name: 'target',\n                                    container: {\n                                        0x63c5: { name: 'tagTrackUID', value: DataType.uid },\n                                        0x63c4: { name: 'tagChapterUID', value: DataType.uint },\n                                        0x63c6: { name: 'tagAttachmentUID', value: DataType.uid },\n                                        0x63ca: { name: 'targetType', value: DataType.string }, // extended\n                                        0x68ca: { name: 'targetTypeValue', value: DataType.uint }, // extended\n                                        0x63c9: { name: 'tagEditionUID', value: DataType.uid } // extended\n                                    }\n                                },\n                                0x67c8: {\n                                    name: 'simpleTags',\n                                    multiple: true,\n                                    container: {\n                                        0x45a3: { name: 'name', value: DataType.string },\n                                        0x4487: { name: 'string', value: DataType.string },\n                                        0x4485: { name: 'binary', value: DataType.binary },\n                                        0x447a: { name: 'language', value: DataType.string }, // extended\n                                        0x447b: { name: 'languageIETF', value: DataType.string }, // extended\n                                        0x4484: { name: 'default', value: DataType.bool } // extended\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n//# sourceMappingURL=MatroskaDtd.js.map","import { Float32_BE, Float64_BE, StringType, UINT8 } from 'token-types';\nimport initDebug from 'debug';\nimport { EndOfStreamError } from 'strtok3';\nimport { DataType } from './types.js';\nimport * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:ebml');\nexport class EbmlContentError extends makeUnexpectedFileContentError('EBML') {\n}\nexport const ParseAction = {\n    ReadNext: 0, // Continue reading the next elements\n    IgnoreElement: 2, // Ignore (do not read) this element\n    SkipSiblings: 3, // Skip all remaining elements at the same level\n    TerminateParsing: 4, // Terminate the parsing process\n    SkipElement: 5 // Consider the element has read, assume position is at the next element\n};\n/**\n * Extensible Binary Meta Language (EBML) iterator\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nexport class EbmlIterator {\n    /**\n     * @param {ITokenizer} tokenizer Input\n     * @param tokenizer\n     */\n    constructor(tokenizer) {\n        this.padding = 0;\n        this.parserMap = new Map();\n        this.ebmlMaxIDLength = 4;\n        this.ebmlMaxSizeLength = 8;\n        this.tokenizer = tokenizer;\n        this.parserMap.set(DataType.uint, e => this.readUint(e));\n        this.parserMap.set(DataType.string, e => this.readString(e));\n        this.parserMap.set(DataType.binary, e => this.readBuffer(e));\n        this.parserMap.set(DataType.uid, async (e) => this.readBuffer(e));\n        this.parserMap.set(DataType.bool, e => this.readFlag(e));\n        this.parserMap.set(DataType.float, e => this.readFloat(e));\n    }\n    async iterate(dtdElement, posDone, listener) {\n        return this.parseContainer(linkParents(dtdElement), posDone, listener);\n    }\n    async parseContainer(dtdElement, posDone, listener) {\n        const tree = {};\n        while (this.tokenizer.position < posDone) {\n            let element;\n            const elementPosition = this.tokenizer.position;\n            try {\n                element = await this.readElement();\n            }\n            catch (error) {\n                if (error instanceof EndOfStreamError) {\n                    break;\n                }\n                throw error;\n            }\n            const child = dtdElement.container[element.id];\n            if (child) {\n                const action = listener.startNext(child);\n                switch (action) {\n                    case ParseAction.ReadNext:\n                        {\n                            if (element.id === 0x1F43B675) {\n                                // Hack to ignore remaining segment, when cluster element received\n                                // await this.tokenizer.ignore(posDone - this.tokenizer.position);\n                                // break;\n                            }\n                            debug(`Read element: name=${getElementPath(child)}{id=0x${element.id.toString(16)}, container=${!!child.container}} at position=${elementPosition}`);\n                            if (child.container) {\n                                const res = await this.parseContainer(child, element.len >= 0 ? this.tokenizer.position + element.len : -1, listener);\n                                if (child.multiple) {\n                                    if (!tree[child.name]) {\n                                        tree[child.name] = [];\n                                    }\n                                    tree[child.name].push(res);\n                                }\n                                else {\n                                    tree[child.name] = res;\n                                }\n                                await listener.elementValue(child, res, elementPosition);\n                            }\n                            else {\n                                const parser = this.parserMap.get(child.value);\n                                if (typeof parser === 'function') {\n                                    const value = await parser(element);\n                                    tree[child.name] = value;\n                                    await listener.elementValue(child, value, elementPosition);\n                                }\n                            }\n                        }\n                        break;\n                    case ParseAction.SkipElement:\n                        debug(`Go to next element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        break;\n                    case ParseAction.IgnoreElement:\n                        debug(`Ignore element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    case ParseAction.SkipSiblings:\n                        debug(`Ignore remaining container, at: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        await this.tokenizer.ignore(posDone - this.tokenizer.position);\n                        break;\n                    case ParseAction.TerminateParsing:\n                        debug(`Terminate parsing at element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\n                        return tree;\n                }\n            }\n            else {\n                switch (element.id) {\n                    case 0xec: // void\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    default:\n                        debug(`parseEbml: parent=${getElementPath(dtdElement)}, unknown child: id=${element.id.toString(16)} at position=${elementPosition}`);\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                }\n            }\n        }\n        return tree;\n    }\n    async readVintData(maxLength) {\n        const msb = await this.tokenizer.peekNumber(UINT8);\n        let mask = 0x80;\n        let oc = 1;\n        // Calculate VINT_WIDTH\n        while ((msb & mask) === 0) {\n            if (oc > maxLength) {\n                throw new EbmlContentError('VINT value exceeding maximum size');\n            }\n            ++oc;\n            mask >>= 1;\n        }\n        const id = new Uint8Array(oc);\n        await this.tokenizer.readBuffer(id);\n        return id;\n    }\n    async readElement() {\n        const id = await this.readVintData(this.ebmlMaxIDLength);\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\n        return {\n            id: readUIntBE(id, id.length),\n            len: readUIntBE(lenField, lenField.length)\n        };\n    }\n    async readFloat(e) {\n        switch (e.len) {\n            case 0:\n                return 0.0;\n            case 4:\n                return this.tokenizer.readNumber(Float32_BE);\n            case 8:\n                return this.tokenizer.readNumber(Float64_BE);\n            case 10:\n                return this.tokenizer.readNumber(Float64_BE);\n            default:\n                throw new EbmlContentError(`Invalid IEEE-754 float length: ${e.len}`);\n        }\n    }\n    async readFlag(e) {\n        return (await this.readUint(e)) === 1;\n    }\n    async readUint(e) {\n        const buf = await this.readBuffer(e);\n        return readUIntBE(buf, e.len);\n    }\n    async readString(e) {\n        const rawString = await this.tokenizer.readToken(new StringType(e.len, 'utf-8'));\n        return rawString.replace(/\\x00.*$/g, '');\n    }\n    async readBuffer(e) {\n        const buf = new Uint8Array(e.len);\n        await this.tokenizer.readBuffer(buf);\n        return buf;\n    }\n}\nfunction readUIntBE(buf, len) {\n    return Number(readUIntBeAsBigInt(buf, len));\n}\n/**\n * Reeds an unsigned integer from a big endian buffer of length `len`\n * @param buf Buffer to decode from\n * @param len Number of bytes\n * @private\n */\nfunction readUIntBeAsBigInt(buf, len) {\n    const normalizedNumber = new Uint8Array(8);\n    const cleanNumber = buf.subarray(0, len);\n    try {\n        normalizedNumber.set(cleanNumber, 8 - len);\n        return Token.UINT64_BE.get(normalizedNumber, 0);\n    }\n    catch (error) {\n        return BigInt(-1);\n    }\n}\nfunction linkParents(element) {\n    if (element.container) {\n        Object.keys(element.container)\n            .map(id => {\n            const child = element.container[id];\n            child.id = Number.parseInt(id);\n            return child;\n        }).forEach(child => {\n            child.parent = element;\n            linkParents(child);\n        });\n    }\n    return element;\n}\nexport function getElementPath(element) {\n    let path = '';\n    if (element.parent && element.parent.name !== 'dtd') {\n        path += `${getElementPath(element.parent)}/`;\n    }\n    return path + element.name;\n}\n//# sourceMappingURL=EbmlIterator.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { matroskaDtd } from './MatroskaDtd.js';\nimport { TargetType, TrackType } from './types.js';\nimport { EbmlIterator, ParseAction } from '../ebml/EbmlIterator.js';\nconst debug = initDebug('music-metadata:parser:matroska');\n/**\n * Extensible Binary Meta Language (EBML) parser\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nexport class MatroskaParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.seekHeadOffset = 0;\n        /**\n         * Use index to skip multiple segment/cluster elements at once.\n         * Significant performance impact\n         */\n        this.flagUseIndexToSkipClusters = this.options.mkvUseIndex ?? false;\n    }\n    async parse() {\n        const containerSize = this.tokenizer.fileInfo.size ?? Number.MAX_SAFE_INTEGER;\n        const matroskaIterator = new EbmlIterator(this.tokenizer);\n        debug('Initializing DTD end MatroskaIterator');\n        await matroskaIterator.iterate(matroskaDtd, containerSize, {\n            startNext: (element) => {\n                switch (element.id) {\n                    // case 0x1f43b675: // cluster\n                    case 0x1c53bb6b: // Cueing Data\n                        debug(`Skip element: name=${element.name}, id=0x${element.id.toString(16)}`);\n                        return ParseAction.IgnoreElement;\n                    case 0x1f43b675: // cluster\n                        if (this.flagUseIndexToSkipClusters && this.seekHead) {\n                            const index = this.seekHead.seek.find(index => index.position + this.seekHeadOffset > this.tokenizer.position);\n                            if (index) {\n                                // Go to next index position\n                                const ignoreSize = index.position + this.seekHeadOffset - this.tokenizer.position;\n                                debug(`Use index to go to next position, ignoring ${ignoreSize} bytes`);\n                                this.tokenizer.ignore(ignoreSize);\n                                return ParseAction.SkipElement;\n                            }\n                        }\n                        return ParseAction.IgnoreElement;\n                    default:\n                        return ParseAction.ReadNext;\n                }\n            },\n            elementValue: async (element, value, offset) => {\n                debug(`Received: name=${element.name}, value=${value}`);\n                switch (element.id) {\n                    case 0x4282: // docType\n                        this.metadata.setFormat('container', `EBML/${value}`);\n                        break;\n                    case 0x114d9b74:\n                        this.seekHead = value;\n                        this.seekHeadOffset = offset;\n                        break;\n                    case 0x1549a966:\n                        { // Info (Segment Information)\n                            const info = value;\n                            const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\n                            if (typeof info.duration === 'number') {\n                                const duration = info.duration * timecodeScale / 1000000000;\n                                await this.addTag('segment:title', info.title);\n                                this.metadata.setFormat('duration', Number(duration));\n                            }\n                        }\n                        break;\n                    case 0x1654ae6b:\n                        { // tracks\n                            const audioTracks = value;\n                            if (audioTracks?.entries) {\n                                audioTracks.entries.forEach(entry => {\n                                    const stream = {\n                                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\n                                        codecSettings: entry.codecSettings,\n                                        flagDefault: entry.flagDefault,\n                                        flagLacing: entry.flagLacing,\n                                        flagEnabled: entry.flagEnabled,\n                                        language: entry.language,\n                                        name: entry.name,\n                                        type: entry.trackType,\n                                        audio: entry.audio,\n                                        video: entry.video\n                                    };\n                                    this.metadata.addStreamInfo(stream);\n                                });\n                                const audioTrack = audioTracks.entries\n                                    .filter(entry => entry.trackType === TrackType.audio)\n                                    .reduce((acc, cur) => {\n                                    if (!acc)\n                                        return cur;\n                                    if (cur.flagDefault && !acc.flagDefault)\n                                        return cur;\n                                    if (cur.trackNumber < acc.trackNumber)\n                                        return cur;\n                                    return acc;\n                                }, null);\n                                if (audioTrack) {\n                                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\n                                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\n                                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\n                                }\n                            }\n                        }\n                        break;\n                    case 0x1254c367:\n                        { // tags\n                            const tags = value;\n                            await Promise.all(tags.tag.map(async (tag) => {\n                                const target = tag.target;\n                                const targetType = target?.targetTypeValue ? TargetType[target.targetTypeValue] : (target?.targetType ? target.targetType : 'track');\n                                await Promise.all(tag.simpleTags.map(async (simpleTag) => {\n                                    const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\n                                    await this.addTag(`${targetType}:${simpleTag.name}`, value);\n                                }));\n                            }));\n                        }\n                        break;\n                    case 0x1941a469:\n                        { // attachments\n                            const attachments = value;\n                            await Promise.all(attachments.attachedFiles\n                                .filter(file => file.mimeType.startsWith('image/'))\n                                .map(file => this.addTag('picture', {\n                                data: file.data,\n                                format: file.mimeType,\n                                description: file.description,\n                                name: file.name\n                            })));\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    async addTag(tagId, value) {\n        await this.metadata.addTag('matroska', tagId, value);\n    }\n}\n//# sourceMappingURL=MatroskaParser.js.map"],"names":["DataType","matroskaDtd","name","container","value","multiple","debug","initDebug","EbmlContentError","makeUnexpectedFileContentError","ParseAction","EbmlIterator","constructor","tokenizer","this","padding","parserMap","Map","ebmlMaxIDLength","ebmlMaxSizeLength","set","e","readUint","readString","readBuffer","async","readFlag","readFloat","iterate","dtdElement","posDone","listener","parseContainer","linkParents","tree","position","element","elementPosition","readElement","error","EndOfStreamError","child","id","startNext","getElementPath","toString","res","len","push","elementValue","parser","get","ignore","readVintData","maxLength","msb","peekNumber","UINT8","mask","oc","Uint8Array","lenField","length","readUIntBE","readNumber","Float32_BE","Float64_BE","readToken","StringType","replace","buf","Number","normalizedNumber","cleanNumber","subarray","Token","BigInt","readUIntBeAsBigInt","Object","keys","map","parseInt","forEach","parent","path","MatroskaParser","BasicParser","super","arguments","seekHeadOffset","flagUseIndexToSkipClusters","options","mkvUseIndex","parse","containerSize","fileInfo","size","MAX_SAFE_INTEGER","matroskaIterator","seekHead","index","seek","find","ignoreSize","offset","metadata","setFormat","info","timecodeScale","duration","addTag","title","audioTracks","entries","entry","stream","codecName","codecID","codecSettings","flagDefault","flagLacing","flagEnabled","language","type","trackType","audio","video","addStreamInfo","audioTrack","filter","TrackType","reduce","acc","cur","trackNumber","samplingFrequency","channels","tags","Promise","all","tag","target","targetType","targetTypeValue","TargetType","simpleTags","simpleTag","string","binary","attachments","attachedFiles","file","mimeType","startsWith","data","format","description","tagId"],"sourceRoot":""}