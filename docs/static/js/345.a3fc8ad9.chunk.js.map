{"version":3,"file":"static/js/345.a3fc8ad9.chunk.js","mappings":"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","sources":["../node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js","../node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js","../node_modules/music-metadata/lib/mpeg/XingTag.js","../node_modules/music-metadata/lib/mpeg/MpegParser.js","../node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as common from '../common/Util.js';\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nconst NameCode = {\n    /**\n     * not set\n     */\n    not_set: 0,\n    /**\n     * Radio Gain Adjustment\n     */\n    radio: 1,\n    /**\n     * Audiophile Gain Adjustment\n     */\n    audiophile: 2\n};\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nconst ReplayGainOriginator = {\n    /**\n     * Replay Gain unspecified\n     */\n    unspecified: 0,\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    engineer: 1,\n    /**\n     * Replay Gain set by user\n     */\n    user: 2,\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    automatic: 3,\n    /**\n     * Set by simple RMS average\n     */\n    rms_average: 4\n};\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nexport const ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = common.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = common.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = common.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: common.getBitAllignedNumber(buf, off, 0, 3),\n                origin: common.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n//# sourceMappingURL=ReplayGainDataFormat.js.map","/**\n * Extended Lame Header\n */\nimport * as Token from 'token-types';\nimport * as common from '../common/Util.js';\nimport { ReplayGain } from './ReplayGainDataFormat.js';\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nexport const ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: common.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: common.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? null : track_peak / 2 ** 23,\n            track_gain: ReplayGain.get(buf, 6),\n            album_gain: ReplayGain.get(buf, 8),\n            music_length: Token.UINT32_BE.get(buf, off + 20),\n            music_crc: Token.UINT8.get(buf, off + 24),\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n//# sourceMappingURL=ExtendedLameHeader.js.map","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { ExtendedLameHeader } from './ExtendedLameHeader.js';\n/**\n * Info Tag: Xing, LAME\n */\nexport const InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nexport const LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nexport const XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: util.isBitSet(buf, off, 31),\n            bytes: util.isBitSet(buf, off, 30),\n            toc: util.isBitSet(buf, off, 29),\n            vbrScale: util.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nexport async function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(XingHeaderFlags);\n    const xingInfoTag = { numFrames: null, streamSize: null, vbrScale: null };\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = new Uint8Array(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match !== null) {\n            const majorMinorVersion = match[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => Number.parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\n//# sourceMappingURL=XingTag.js.map","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport * as common from '../common/Util.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { InfoTagHeaderTag, LameEncoderVersion, readXingHeader } from './XingTag.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:mpeg');\nexport class MpegContentError extends makeUnexpectedFileContentError('MPEG') {\n}\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC', // Low Complexity\n        'AAC SSR', // Scalable Sample Rate\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, null, null, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // E(15,12): Bitrate index\n        this.bitrateIndex = null;\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = null;\n        // G(9): Padding bit\n        this.padding = null;\n        // H(8): Private bit\n        this.privateBit = null;\n        // I(7,6): Channel Mode\n        this.channelModeIndex = null;\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = null;\n        // L(2): Original\n        this.isOriginalMedia = null;\n        this.version = null;\n        this.bitrate = null;\n        this.samplingRate = null;\n        this.frameLength = 0;\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return this.samplingRate == null ? null : (numFrames * this.calcSamplesPerFrame() / this.samplingRate);\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n        return null;\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = common.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = common.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new MpegContentError('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new MpegContentError('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(\"layer=0 => ADTS\");\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = `ADTS/MPEG-${this.version}`;\n        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig ? this.mp4ChannelConfig.join('+') : '?'}`);\n        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return null;\n        }\n        if (this.version && this.bitrateIndex) {\n            const codecIndex = 10 * Math.floor(this.version) + this.layer;\n            return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n        }\n        return null;\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03 || this.version === null || this.sampRateFreqIndex == null)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    1: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    2: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    3: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    4: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    5: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    6: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    7: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    8: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    9: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    10: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    11: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    12: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    13: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    14: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0: 44100, 1: 48000, 2: 32000 },\n    2: { 0: 22050, 1: 24000, 2: 16000 },\n    2.5: { 0: 11025, 1: 12000, 2: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152], // MPEG-1\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return `V${Math.floor((100 - vbrScale) / 10)}`;\n}\nexport class MpegParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.offset = 0;\n        this.frame_size = 0;\n        this.crc = null;\n        this.calculateEofDuration = false;\n        this.samplesPerFrame = null;\n        this.buf_frame_header = new Uint8Array(4);\n        /**\n         * Number of bytes already parsed since beginning of stream / file\n         */\n        this.mpegOffset = null;\n        this.syncPeek = {\n            buf: new Uint8Array(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n                if (this.calculateEofDuration) {\n                    if (this.samplesPerFrame !== null) {\n                        const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            const duration = numberOfSamples / this.metadata.format.sampleRate;\n                            debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                            this.metadata.setFormat('duration', duration);\n                        }\n                    }\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = !!this.metadata.native.ID3v1;\n        if (this.mpegOffset !== null) {\n            if (format.duration && this.tokenizer.fileInfo.size) {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (format.codecProfile && format.codecProfile[0] === 'V') {\n                    this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n                }\n            }\n            if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (this.frame_size !== null && this.samplesPerFrame !== null) {\n                    const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    if (format.sampleRate && !format.duration) {\n                        const duration = numberOfSamples / format.sampleRate;\n                        debug(\"Calculate CBR duration based on file size: %s\", duration);\n                        this.metadata.setFormat('duration', duration);\n                    }\n                }\n            }\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                gotFirstSync = false;\n                bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                if (bo === -1) {\n                    if (this.syncPeek.len < this.syncPeek.buf.length) {\n                        throw new EndOfStreamError();\n                    }\n                    await this.tokenizer.ignore(this.syncPeek.len);\n                    break; // continue with next buffer\n                }\n                ++bo;\n                gotFirstSync = true;\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header.subarray(1), { length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            if (err instanceof Error) {\n                this.metadata.addWarning(`Parse error: ${err.message}`);\n                return false; // sync\n            }\n            throw err;\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version !== null && header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new MpegContentError('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        if (header.bitrate !== null && header.samplingRate != null) {\n            const fsize = (bps * header.bitrate / header.samplingRate) + ((header.padding) ? slot_size : 0);\n            this.frame_size = Math.floor(fsize);\n        }\n        this.audioFrameHeader = header;\n        if (header.bitrate !== null) {\n            this.bitrates.push(header.bitrate);\n        }\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 3) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        await this.skipSideInformation();\n        return false;\n    }\n    async parseAdts(header) {\n        const buf = new Uint8Array(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        if (header.samplingRate !== null) {\n            const framesPerSec = header.samplingRate / this.samplesPerFrame;\n            const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n            const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n            this.metadata.setFormat('bitrate', bitrate);\n            debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        }\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        if (this.audioFrameHeader) {\n            const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n            if (sideinfo_length !== null) {\n                await this.tokenizer.readToken(new Token.Uint8ArrayType(sideinfo_length));\n                // side information\n                this.offset += sideinfo_length;\n                await this.readXtraInfoHeader();\n                return;\n            }\n        }\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(InfoTagHeaderTag);\n        this.offset += InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing': {\n                const infoTag = await this.readXingInfoHeader();\n                if (infoTag.vbrScale !== null) {\n                    const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                    this.metadata.setFormat('codecProfile', codecProfile);\n                }\n                return null;\n            }\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME': {\n                const version = await this.tokenizer.readToken(LameEncoderVersion);\n                if (this.frame_size !== null && this.frame_size >= this.offset + LameEncoderVersion.len) {\n                    this.offset += LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', `LAME ${version}`);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                this.metadata.addWarning('Corrupt LAME header');\n                break;\n            }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning(`Frame ${this.frameCount}corrupt: negative frameDataLeft`);\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await readXingHeader(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', `LAME ${common.stripNulls(infoTag.lame.version)}`);\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize && this.audioFrameHeader && infoTag.numFrames !== null) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new MpegContentError('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\n//# sourceMappingURL=MpegParser.js.map","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map"],"names":["ReplayGain","get","buf","off","gain_type","common","sign","gain_adj","type","origin","adjustment","ExtendedLameHeader","len","track_peak","Token","revision","vbr_method","lowpass_filter","track_gain","album_gain","music_length","music_crc","header_crc","InfoTagHeaderTag","LameEncoderVersion","XingHeaderFlags","frames","util","bytes","toc","vbrScale","debug","initDebug","MpegContentError","makeUnexpectedFileContentError","MPEG4","AudioObjectTypes","SamplingFrequencies","MPEG4_ChannelConfigurations","undefined","MpegFrameHeader","constructor","this","bitrateIndex","sampRateFreqIndex","padding","privateBit","channelModeIndex","modeExtension","isOriginalMedia","version","bitrate","samplingRate","frameLength","versionIndex","layer","LayerDescription","parseAdtsHeader","parseMpegHeader","isProtectedByCRC","calcDuration","numFrames","calcSamplesPerFrame","samplesInFrameTable","calculateSideInfoLength","calcSlotSize","container","isCopyrighted","emphasis","VersionID","channelMode","ChannelMode","codec","bitrateInKbps","calcBitrate","calcSamplingRate","profileIndex","codecProfile","samplingFrequencyIndex","channelIndex","mp4ChannelConfig","join","codecIndex","Math","floor","bitrate_index","sampling_rate_freq_index","SyncByte1","SyncByte2","FrameHeader","MpegParser","AbstractID3Parser","super","arguments","frameCount","syncFrameCount","countSkipFrameData","totalDataLength","bitrates","offset","frame_size","crc","calculateEofDuration","samplesPerFrame","buf_frame_header","Uint8Array","mpegOffset","syncPeek","postId3v2Parse","metadata","setFormat","quit","sync","parseCommonMpegHeader","err","EndOfStreamError","numberOfSamples","format","sampleRate","duration","finalize","hasID3v1","native","ID3v1","tokenizer","fileInfo","size","mpegSize","round","gotFirstSync","bo","peekBuffer","length","mayBeLess","ignore","position","indexOf","header","subarray","Error","addWarning","message","parseAdts","parseAudioFrameHeader","slot_size","samples_per_frame","bps","fsize","audioFrameHeader","push","skipSideInformation","areAllSame","options","parseCrc","readBuffer","framesPerSec","readNumber","sideinfo_length","readToken","readXtraInfoHeader","headerTag","readXingInfoHeader","infoTag","skipFrameData","frameDataLeft","async","flags","xingInfoTag","streamSize","peekToken","lame","match","split","map","n","Number","parseInt","extended","readXingHeader","array","first","every","element","BasicParser","id3parser","ID3v2Parser","startsWithID3v2Header","ID3v2Header","fileIdentifier","parse","parseID3v2","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser"],"sourceRoot":""}