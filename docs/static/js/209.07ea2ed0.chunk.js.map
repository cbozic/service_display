{"version":3,"file":"static/js/209.07ea2ed0.chunk.js","mappings":"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","sources":["../node_modules/music-metadata/lib/id3v2/FrameParser.js","../node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.slice(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.slice(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = Token.UINT32_BE.get(uint8Array, 0);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: dataLen >= 5 ? Token.UINT32_BE.get(uint8Array, offset + 1) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.slice(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.slice(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.slice(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.slice(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=FrameParser.js.map","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nconst asciiDecoder = new TextDecoder('ascii');\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 3)),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 4)),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=ID3v2Parser.js.map"],"names":["debug","initDebug","defaultEnc","parseGenreCode","code","match","Genres","Number","parseInt","FrameParser","constructor","major","warningCollector","this","readData","uint8Array","type","includeCovers","length","addWarning","concat","encoding","bom","TextEncodingToken","get","offset","output","nullTerminatorLength","getNullTerminatorLength","fzero","text","util","slice","replace","error","Error","message","functionList","splitValue","map","v","origVal","genres","word","c","undefined","push","genre","parseGenre","reduce","acc","val","Array","isArray","idAndData","readIdentifierAndData","description","id","data","pic","format","majorVer","Id3v2ContentError","makeUnexpectedMajorVersionError","fixPictureMimeType","AttachedPictureType","Token","syltHeader","SyncTextHeader","len","result","descriptor","language","contentType","timeStampFormat","syncText","readSyllables","nullStr","readNullTerminatedString","subarray","timestamp","textHeader","TextHeader","descriptorStr","textStr","ufid","owner_identifier","identifier","priv","email","dataLen","rating","counter","mimeType","filename","url","zeroIndex","txt","pictureType","toLocaleLowerCase","entries","res","i","names","split","tag","values","trimArray","value","trim","enc","makeUnexpectedFileContentError","asciiDecoder","TextDecoder","ID3v2Parser","tokenizer","id3Header","metadata","headerType","options","removeUnsyncBytes","buffer","readI","writeI","getFrameHeaderLength","readFrameFlags","b","status","tag_alter_preservation","file_alter_preservation","read_only","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","readFrameData","frameHeader","_frameHeader$flags","_frameHeader$flags2","frameParser","flags","makeDescriptionTagName","parse","readToken","ID3v2Header","fileIdentifier","version","isExtendedHeader","parseExtendedHeader","parseId3Data","size","extendedHeader","ExtendedHeader","dataRemaining","parseExtendedHeaderData","extendedHeaderSize","ignore","parseMetadata","handleTag","Promise","all","addTag","resolveValue","arguments","tags","frameHeaderLength","frameHeaderBytes","readFrameHeader","frameDataBytes","skipCovers","header","decode","UINT32SYNCSAFE"],"sourceRoot":""}