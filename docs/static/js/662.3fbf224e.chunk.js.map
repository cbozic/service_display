{"version":3,"file":"static/js/662.3fbf224e.chunk.js","mappings":"mLAIO,MAAMA,EAAS,CAClBC,IAAK,EACLC,IAAKA,CAACC,EAAKC,KACA,CAEHC,QAAS,IAAIC,EAAAA,WAAiB,EAAG,UAAUJ,IAAIC,EAAKC,GAEpDG,UAAWD,EAAAA,UAAgBJ,IAAIC,EAAKC,EAAM,MAO/C,MAAMI,EACTC,WAAAA,CAAYC,GACRC,KAAKD,UAAYA,EACjBC,KAAKV,IAAMS,EAAUH,UACrBI,KAAKV,KAAkB,EAAXU,KAAKV,GACrB,CACAC,GAAAA,CAAIC,EAAKC,GACL,OAAO,IAAIE,EAAAA,WAAiBK,KAAKD,UAAUH,UAAW,SAASL,IAAIC,EAAKC,EAC5E,E,cCxBG,MAAMQ,WAAyBC,EAAAA,EAAAA,IAA+B,UAK9D,MAAMC,EACJ,EADIA,EAGF,EAHEA,EAIG,EAJHA,EAKM,KALNA,EAME,KANFA,EAOC,IAPDA,EASQ,IATRA,EAUJ,KAVIA,EAWE,IAXFA,EAYC,IAZDA,EAaJ,EAbIA,EAcH,KAdGA,EAeH,GAEGC,EAAoB,CAC7B,CAACD,GAAiB,MAClB,CAACA,GAAmB,QACpB,CAACA,GAAwB,aACzB,CAACA,GAA2B,gBAC5B,CAACA,GAAuB,YACxB,CAACA,GAAsB,WACvB,CAACA,GAA6B,kBAC9B,CAACA,GAAiB,MAClB,CAACA,GAAuB,YACxB,CAACA,GAAsB,WACvB,CAACA,GAAiB,MAClB,CAACA,GAAkB,OACnB,CAACA,GAAkB,QAMhB,MAAME,EACTP,WAAAA,CAAYQ,GACR,GAAIA,EAAOV,UAAY,GACnB,MAAM,IAAIK,EAAiB,sBAC/BD,KAAKV,IAAMgB,EAAOV,SACtB,CACAL,GAAAA,CAAIC,EAAKC,GACL,MAAO,CACHc,WAAYZ,EAAAA,UAAgBJ,IAAIC,EAAKC,GACrCe,UAAWb,EAAAA,UAAgBJ,IAAIC,EAAKC,EAAM,GAC1CgB,eAAgBd,EAAAA,UAAgBJ,IAAIC,EAAKC,EAAM,GAC/CiB,gBAAiBf,EAAAA,UAAgBJ,IAAIC,EAAKC,EAAM,GAChDkB,YAAahB,EAAAA,UAAgBJ,IAAIC,EAAKC,EAAM,IAC5CmB,eAAgBjB,EAAAA,UAAgBJ,IAAIC,EAAKC,EAAM,IAEvD,EAOG,MAAMoB,EACTf,WAAAA,CAAYQ,GACR,GAAIA,EAAOV,UAAY,EACnB,MAAM,IAAIK,EAAiB,4BAE/BD,KAAKV,IAAMgB,EAAOV,SACtB,CACAL,GAAAA,CAAIC,EAAKC,GACL,MAAO,CACHqB,eAAgBnB,EAAAA,UAAgBJ,IAAIC,EAAKC,GAEjD,E,4CCtEG,MAAMsB,EAA+B,CACxCzB,IAAK,IACLC,IAAKA,CAACyB,EAAYvB,KACP,CACHwB,aAAaC,EAAAA,EAAAA,IAAW,IAAIvB,EAAAA,WAAiB,IAAK,SAASJ,IAAIyB,EAAYvB,IAAM0B,OACjFC,YAAYF,EAAAA,EAAAA,IAAW,IAAIvB,EAAAA,WAAiB,GAAI,SAASJ,IAAIyB,EAAYvB,EAAM,MAAM0B,OACrFE,qBAAqBH,EAAAA,EAAAA,IAAW,IAAIvB,EAAAA,WAAiB,GAAI,SAASJ,IAAIyB,EAAYvB,EAAM,MAAM0B,OAC9FG,iBAAiBJ,EAAAA,EAAAA,IAAW,IAAIvB,EAAAA,WAAiB,GAAI,SAASJ,IAAIyB,EAAYvB,EAAM,MAAM0B,OAC1FI,iBAAiBL,EAAAA,EAAAA,IAAW,IAAIvB,EAAAA,WAAiB,EAAG,SAASJ,IAAIyB,EAAYvB,EAAM,MAAM0B,OACzFK,iBAAkB7B,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,KACxDgC,kBAAmB9B,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,KACzDiC,QAAS/B,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,KAC/CkC,KAAM,IAAIhC,EAAAA,eAAqB,IAAIJ,IAAIyB,EAAYvB,EAAM,KACzDmC,cAAejC,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,KACrDoC,iBAAkBlC,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,KACxDqC,qBAAsBnC,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,KAC5DsC,qBAAsBpC,EAAAA,UAAgBJ,IAAIyB,EAAYvB,EAAM,QCXlEuC,EAAQC,EAAU,8BAYjB,MAAMC,UAAmBC,EAAAA,EAC5BrC,WAAAA,GACIsC,SAASC,WACTrC,KAAKsC,WAAa,CACtB,CACA,WAAMC,GACF,MAAMC,QAAmBxC,KAAKyC,UAAUC,UAAUC,GAElD,GADAX,EAAM,OAADY,OAAQ5C,KAAKyC,UAAUI,SAAQ,qBAAAD,OAAoBJ,EAAW9C,UACxC,SAAvB8C,EAAW9C,QAEf,OAAOM,KAAK8C,eAAeN,EAAW5C,WAAWmD,OAAMC,IACnD,KAAMA,aAAeC,EAAAA,IACjB,MAAMD,CACV,GAER,CACA,oBAAMF,CAAelD,GACjB,MAAMsD,QAAalD,KAAKyC,UAAUC,UAAUS,EAAAA,GAE5C,GADAnD,KAAKoD,SAASC,UAAU,YAAaH,GAE5B,SADDA,EAEA,OAAOlD,KAAKsD,cAAc1D,EAAYuD,EAAAA,EAAY7D,KAElD,MAAM,IAAIW,EAAiB,iCAAD2C,OAAkCM,GAExE,CACA,mBAAMI,CAAcC,GAChB,KAAOA,GAAaZ,EAAYrD,KAAK,CACjC,MAAMgB,QAAeN,KAAKyC,UAAUC,UAAUC,GAO9C,OANAY,GAAaZ,EAAYrD,IAAMgB,EAAOV,UAClCU,EAAOV,UAAY2D,GACnBvD,KAAKoD,SAASI,WAAW,qCAE7BxD,KAAKM,OAASA,EACd0B,EAAM,OAADY,OAAQ5C,KAAKyC,UAAUI,SAAQ,mCAAAD,OAAkCtC,EAAOZ,UACrEY,EAAOZ,SACX,IAAK,aACKM,KAAKyD,aAAanD,GACxB,MACJ,IAAK,OACDN,KAAKoD,SAASC,UAAU,YAAY,GACpCrD,KAAK0D,WAAa1D,KAAKyC,UAAUC,UAAU,IAAIiB,EAAoBrD,IACnE,MACJ,IAAK,OAAQ,CACT,MAAMsD,QAAY5D,KAAKyC,UAAUC,UAAU,IAAIiB,EAAiBrD,IAChE,IAAIuD,EAAYF,EAA4BC,EAAIrD,YAC3CsD,IACD7B,EAAM,uBAADY,OAAwBgB,EAAIrD,aACjCsD,EAAY,YAAHjB,OAAegB,EAAIrD,WAAU,MAE1CP,KAAKoD,SAASC,UAAU,QAASQ,GACjC7D,KAAKoD,SAASC,UAAU,gBAAiBO,EAAIhD,gBAC7CZ,KAAKoD,SAASC,UAAU,aAAcO,EAAInD,gBAC1CT,KAAKoD,SAASC,UAAU,mBAAoBO,EAAIpD,WAChDR,KAAKoD,SAASC,UAAU,UAAWO,EAAIjD,YAAciD,EAAInD,eAAiB,GAC1ET,KAAKsC,WAAasB,EAAIjD,YACtB,KACJ,CACA,IAAK,OACL,IAAK,OAAQ,CACT,MAAMmD,QAAiB9D,KAAKyC,UAAUC,UAAU,IAAI/C,EAAAA,eAAqBW,EAAOV,YAC1EmE,EAAMd,EAAAA,GAAmBa,SACzB,IAAIE,EAAAA,GAAczB,MAAMvC,KAAKoD,SAAUW,EAAK/D,KAAKiE,SACvD,KACJ,CACA,IAAK,OAAQ,EAC6B,IAAlCjE,KAAKoD,SAASc,OAAOC,UACrBnE,KAAKoD,SAASC,UAAU,YAAY,GAExC,IAAIzD,EAAYU,EAAOV,UACvB,GAAII,KAAKyC,UAAU2B,SAASC,KAAM,CAC9B,MAAMC,EAAgBtE,KAAKyC,UAAU2B,SAASC,KAAOrE,KAAKyC,UAAUI,SAChEyB,EAAgB1E,IAChBI,KAAKoD,SAASI,WAAW,2CACzB5D,EAAY0E,EAEpB,CACA,MAAMC,EAAkBvE,KAAK0D,KAAO1D,KAAK0D,KAAK5C,eAAgC,aAAdlB,OAA2B4E,EAAY5E,EAAYI,KAAKsC,WACpHiC,IACAvE,KAAKoD,SAASC,UAAU,kBAAmBkB,GACvCvE,KAAKoD,SAASc,OAAOO,YACrBzE,KAAKoD,SAASC,UAAU,WAAYkB,EAAkBvE,KAAKoD,SAASc,OAAOO,aAGhD,UAA/BzE,KAAKoD,SAASc,OAAOQ,MACrB1E,KAAKoD,SAASC,UAAU,UAAW,OAE9BrD,KAAKoD,SAASc,OAAOO,YAC1BzE,KAAKoD,SAASC,UAAU,UAAWrD,KAAKsC,WAAatC,KAAKoD,SAASc,OAAOO,WAAa,SAErFzE,KAAKyC,UAAUkC,OAAOrE,EAAOV,WACnC,KACJ,CACA,IAAK,OAAQ,CACT,MAAMgF,QAAa5E,KAAKyC,UAAUC,UAAU3B,GAC5C8D,OAAOC,KAAKF,GAAMG,SAAQC,IACtBhF,KAAKoD,SAAS6B,OAAO,OAAQ,QAAFrC,OAAUoC,GAAOJ,EAAKI,GAAK,IAE1D,MAAME,EAAgB5E,EAAOV,UAAYmB,EAA6BzB,UAChEU,KAAKyC,UAAUkC,OAAOO,GAC5B,KACJ,CACA,IAAK,WACDlD,EAAM,8BAADY,OAA+BtC,EAAOZ,QAAO,QAAAkD,OAAOtC,EAAOV,UAAS,WACzEI,KAAKoD,SAASI,WAAW,sBAADZ,OAAuBtC,EAAOZ,gBAChDM,KAAKyC,UAAUkC,OAAOrE,EAAOV,WACnC,MACJ,QACIoC,EAAM,sBAADY,OAAuBtC,EAAOZ,QAAO,QAAAkD,OAAOtC,EAAOV,UAAS,WACjEI,KAAKoD,SAASI,WAAW,sBAADZ,OAAuBtC,EAAOZ,gBAChDM,KAAKyC,UAAUkC,OAAOrE,EAAOV,WAEvCI,KAAKM,OAAOV,UAAY,IAAM,IAC9BoC,EAAM,+BACAhC,KAAKyC,UAAUkC,OAAO,GAEpC,CACJ,CACA,kBAAMlB,CAAa0B,GACf,MAAMC,QAAiBpF,KAAKyC,UAAUC,UAAU,IAAI/C,EAAAA,WAAiB,EAAG,WAExE,OADAqC,EAAM,kDAAmDhC,KAAKyC,UAAUI,SAAUuC,GAEzE,SADDA,EAEOpF,KAAKqF,kBAAkBF,EAAWvF,UAAY,IAErDI,KAAKoD,SAASI,WAAW,gCAADZ,OAAiCwC,IACzDpD,EAAM,mCAADY,OAAoCwC,IAClCpF,KAAKyC,UAAUkC,OAAOQ,EAAWvF,UAAY,GAAG0F,OAEnE,CACA,uBAAMD,CAAkBzF,GACpB,KAAOA,GAAa,GAAG,CACnB,MAAMU,QAAeN,KAAKyC,UAAUC,UAAUC,GACxC4C,EAAa,IAAI5C,EAAsBrC,GACvCkF,QAAcxF,KAAKyC,UAAUC,UAAU6C,GAC7CvF,KAAKiF,OAAO3E,EAAOZ,QAAS+F,EAAAA,GAAgBD,IAC5C5F,GAAc,EAAI2F,EAAWjG,GACjC,CACA,GAAkB,IAAdM,EACA,MAAM,IAAIK,EAAiB,2BAAD2C,OAA4BhD,GAE9D,CACAqF,MAAAA,CAAOS,EAAIF,GACPxF,KAAKoD,SAAS6B,OAAO,OAAQS,EAAIF,EACrC,E","sources":["../node_modules/music-metadata/lib/riff/RiffChunk.js","../node_modules/music-metadata/lib/wav/WaveChunk.js","../node_modules/music-metadata/lib/wav/BwfChunk.js","../node_modules/music-metadata/lib/wav/WaveParser.js"],"sourcesContent":["import * as Token from 'token-types';\n/**\n * Common RIFF chunk header\n */\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: new Token.StringType(4, 'latin1').get(buf, off),\n            // Size\n            chunkSize: Token.UINT32_LE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Token to parse RIFF-INFO tag value\n */\nexport class ListInfoTagValue {\n    constructor(tagHeader) {\n        this.tagHeader = tagHeader;\n        this.len = tagHeader.chunkSize;\n        this.len += this.len & 1; // if it is an odd length, round up to even\n    }\n    get(buf, off) {\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\n    }\n}\n//# sourceMappingURL=RiffChunk.js.map","import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class WaveContentError extends makeUnexpectedFileContentError('Wave') {\n}\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nexport const WaveFormat = {\n    PCM: 0x0001,\n    // MPEG-4 and AAC Audio Types\n    ADPCM: 0x0002,\n    IEEE_FLOAT: 0x0003,\n    MPEG_ADTS_AAC: 0x1600,\n    MPEG_LOAS: 0x1602,\n    RAW_AAC1: 0x00FF,\n    // Dolby Audio Types\n    DOLBY_AC3_SPDIF: 0x0092,\n    DVM: 0x2000,\n    RAW_SPORT: 0x0240,\n    ESST_AC3: 0x0241,\n    DRM: 0x0009,\n    DTS2: 0x2001,\n    MPEG: 0x0050\n};\nexport const WaveFormatNameMap = {\n    [WaveFormat.PCM]: 'PCM',\n    [WaveFormat.ADPCM]: 'ADPCM',\n    [WaveFormat.IEEE_FLOAT]: 'IEEE_FLOAT',\n    [WaveFormat.MPEG_ADTS_AAC]: 'MPEG_ADTS_AAC',\n    [WaveFormat.MPEG_LOAS]: 'MPEG_LOAS',\n    [WaveFormat.RAW_AAC1]: 'RAW_AAC1',\n    [WaveFormat.DOLBY_AC3_SPDIF]: 'DOLBY_AC3_SPDIF',\n    [WaveFormat.DVM]: 'DVM',\n    [WaveFormat.RAW_SPORT]: 'RAW_SPORT',\n    [WaveFormat.ESST_AC3]: 'ESST_AC3',\n    [WaveFormat.DRM]: 'DRM',\n    [WaveFormat.DTS2]: 'DTS2',\n    [WaveFormat.MPEG]: 'MPEG'\n};\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nexport class Format {\n    constructor(header) {\n        if (header.chunkSize < 16)\n            throw new WaveContentError('Invalid chunk size');\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            wFormatTag: Token.UINT16_LE.get(buf, off),\n            nChannels: Token.UINT16_LE.get(buf, off + 2),\n            nSamplesPerSec: Token.UINT32_LE.get(buf, off + 4),\n            nAvgBytesPerSec: Token.UINT32_LE.get(buf, off + 8),\n            nBlockAlign: Token.UINT16_LE.get(buf, off + 12),\n            wBitsPerSample: Token.UINT16_LE.get(buf, off + 14)\n        };\n    }\n}\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nexport class FactChunk {\n    constructor(header) {\n        if (header.chunkSize < 4) {\n            throw new WaveContentError('Invalid fact chunk size.');\n        }\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            dwSampleLength: Token.UINT32_LE.get(buf, off)\n        };\n    }\n}\n//# sourceMappingURL=WaveChunk.js.map","import * as Token from 'token-types';\nimport { stripNulls } from '../common/Util.js';\n/**\n * Broadcast Audio Extension Chunk\n * Ref: https://tech.ebu.ch/docs/tech/tech3285.pdf\n */\nexport const BroadcastAudioExtensionChunk = {\n    len: 420,\n    get: (uint8array, off) => {\n        return {\n            description: stripNulls(new Token.StringType(256, 'ascii').get(uint8array, off)).trim(),\n            originator: stripNulls(new Token.StringType(32, 'ascii').get(uint8array, off + 256)).trim(),\n            originatorReference: stripNulls(new Token.StringType(32, 'ascii').get(uint8array, off + 288)).trim(),\n            originationDate: stripNulls(new Token.StringType(10, 'ascii').get(uint8array, off + 320)).trim(),\n            originationTime: stripNulls(new Token.StringType(8, 'ascii').get(uint8array, off + 330)).trim(),\n            timeReferenceLow: Token.UINT32_LE.get(uint8array, off + 338),\n            timeReferenceHigh: Token.UINT32_LE.get(uint8array, off + 342),\n            version: Token.UINT16_LE.get(uint8array, off + 346),\n            umid: new Token.Uint8ArrayType(64).get(uint8array, off + 348),\n            loudnessValue: Token.UINT16_LE.get(uint8array, off + 412),\n            maxTruePeakLevel: Token.UINT16_LE.get(uint8array, off + 414),\n            maxMomentaryLoudness: Token.UINT16_LE.get(uint8array, off + 416),\n            maxShortTermLoudness: Token.UINT16_LE.get(uint8array, off + 418)\n        };\n    }\n};\n//# sourceMappingURL=BwfChunk.js.map","import * as strtok3 from 'strtok3';\nimport * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as riff from '../riff/RiffChunk.js';\nimport * as WaveChunk from './WaveChunk.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport * as util from '../common/Util.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BroadcastAudioExtensionChunk } from './BwfChunk.js';\nimport { WaveContentError } from './WaveChunk.js';\nconst debug = initDebug('music-metadata:parser:RIFF');\n/**\n * Resource Interchange File Format (RIFF) Parser\n *\n * WAVE PCM soundfile format\n *\n * Ref:\n * - http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html\n * - http://soundfile.sapp.org/doc/WaveFormat\n *\n * ToDo: Split WAVE part from RIFF parser\n */\nexport class WaveParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.blockAlign = 0;\n    }\n    async parse() {\n        const riffHeader = await this.tokenizer.readToken(riff.Header);\n        debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);\n        if (riffHeader.chunkID !== 'RIFF')\n            return; // Not RIFF format\n        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {\n            if (!(err instanceof strtok3.EndOfStreamError)) {\n                throw err;\n            }\n        });\n    }\n    async parseRiffChunk(chunkSize) {\n        const type = await this.tokenizer.readToken(FourCcToken);\n        this.metadata.setFormat('container', type);\n        switch (type) {\n            case 'WAVE':\n                return this.readWaveChunk(chunkSize - FourCcToken.len);\n            default:\n                throw new WaveContentError(`Unsupported RIFF format: RIFF/${type}`);\n        }\n    }\n    async readWaveChunk(remaining) {\n        while (remaining >= riff.Header.len) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            remaining -= riff.Header.len + header.chunkSize;\n            if (header.chunkSize > remaining) {\n                this.metadata.addWarning('Data chunk size exceeds file size');\n            }\n            this.header = header;\n            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);\n            switch (header.chunkID) {\n                case 'LIST':\n                    await this.parseListTag(header);\n                    break;\n                case 'fact': // extended Format chunk,\n                    this.metadata.setFormat('lossless', false);\n                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));\n                    break;\n                case 'fmt ': { // The Util Chunk, non-PCM Formats\n                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));\n                    let subFormat = WaveChunk.WaveFormatNameMap[fmt.wFormatTag];\n                    if (!subFormat) {\n                        debug(`WAVE/non-PCM format=${fmt.wFormatTag}`);\n                        subFormat = `non-PCM (${fmt.wFormatTag})`;\n                    }\n                    this.metadata.setFormat('codec', subFormat);\n                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);\n                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);\n                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);\n                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);\n                    this.blockAlign = fmt.nBlockAlign;\n                    break;\n                }\n                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data\n                case 'ID3 ': { // The way Mp3Tags stores ID3 meta-data\n                    const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                    const rst = strtok3.fromBuffer(id3_data);\n                    await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                    break;\n                }\n                case 'data': { // PCM-data\n                    if (this.metadata.format.lossless !== false) {\n                        this.metadata.setFormat('lossless', true);\n                    }\n                    let chunkSize = header.chunkSize;\n                    if (this.tokenizer.fileInfo.size) {\n                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;\n                        if (calcRemaining < chunkSize) {\n                            this.metadata.addWarning('data chunk length exceeding file length');\n                            chunkSize = calcRemaining;\n                        }\n                    }\n                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);\n                    if (numberOfSamples) {\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);\n                        }\n                    }\n                    if (this.metadata.format.codec === 'ADPCM') { // ADPCM is 4 bits lossy encoding resulting in 352kbps\n                        this.metadata.setFormat('bitrate', 352000);\n                    }\n                    else if (this.metadata.format.sampleRate) {\n                        this.metadata.setFormat('bitrate', this.blockAlign * this.metadata.format.sampleRate * 8);\n                    }\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                }\n                case 'bext': { // Broadcast Audio Extension chunk\thttps://tech.ebu.ch/docs/tech/tech3285.pdf\n                    const bext = await this.tokenizer.readToken(BroadcastAudioExtensionChunk);\n                    Object.keys(bext).forEach(key => {\n                        this.metadata.addTag('exif', `bext.${key}`, bext[key]);\n                    });\n                    const bextRemaining = header.chunkSize - BroadcastAudioExtensionChunk.len;\n                    await this.tokenizer.ignore(bextRemaining);\n                    break;\n                }\n                case '\\x00\\x00\\x00\\x00': // padding ??\n                    debug(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                default:\n                    debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning(`Ignore chunk: RIFF/${header.chunkID}`);\n                    await this.tokenizer.ignore(header.chunkSize);\n            }\n            if (this.header.chunkSize % 2 === 1) {\n                debug('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF\n                await this.tokenizer.ignore(1);\n            }\n        }\n    }\n    async parseListTag(listHeader) {\n        const listType = await this.tokenizer.readToken(new Token.StringType(4, 'latin1'));\n        debug('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);\n        switch (listType) {\n            case 'INFO':\n                return this.parseRiffInfoTags(listHeader.chunkSize - 4);\n            default:\n                this.metadata.addWarning(`Ignore chunk: RIFF/WAVE/LIST/${listType}`);\n                debug(`Ignoring chunkID=RIFF/WAVE/LIST/${listType}`);\n                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();\n        }\n    }\n    async parseRiffInfoTags(chunkSize) {\n        while (chunkSize >= 8) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            const valueToken = new riff.ListInfoTagValue(header);\n            const value = await this.tokenizer.readToken(valueToken);\n            this.addTag(header.chunkID, util.stripNulls(value));\n            chunkSize -= (8 + valueToken.len);\n        }\n        if (chunkSize !== 0) {\n            throw new WaveContentError(`Illegal remaining size: ${chunkSize}`);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('exif', id, value);\n    }\n}\n//# sourceMappingURL=WaveParser.js.map"],"names":["Header","len","get","buf","off","chunkID","Token","chunkSize","ListInfoTagValue","constructor","tagHeader","this","WaveContentError","makeUnexpectedFileContentError","WaveFormat","WaveFormatNameMap","Format","header","wFormatTag","nChannels","nSamplesPerSec","nAvgBytesPerSec","nBlockAlign","wBitsPerSample","FactChunk","dwSampleLength","BroadcastAudioExtensionChunk","uint8array","description","stripNulls","trim","originator","originatorReference","originationDate","originationTime","timeReferenceLow","timeReferenceHigh","version","umid","loudnessValue","maxTruePeakLevel","maxMomentaryLoudness","maxShortTermLoudness","debug","initDebug","WaveParser","BasicParser","super","arguments","blockAlign","parse","riffHeader","tokenizer","readToken","riff","concat","position","parseRiffChunk","catch","err","strtok3","type","FourCcToken","metadata","setFormat","readWaveChunk","remaining","addWarning","parseListTag","fact","WaveChunk","fmt","subFormat","id3_data","rst","ID3v2Parser","options","format","lossless","fileInfo","size","calcRemaining","numberOfSamples","undefined","sampleRate","codec","ignore","bext","Object","keys","forEach","key","addTag","bextRemaining","listHeader","listType","parseRiffInfoTags","then","valueToken","value","util","id"],"sourceRoot":""}