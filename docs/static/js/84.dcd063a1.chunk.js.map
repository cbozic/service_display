{"version":3,"file":"static/js/84.dcd063a1.chunk.js","mappings":"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","sources":["../node_modules/music-metadata/lib/flac/FlacParser.js","../node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js","../node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js","../node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js","../node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js"],"sourcesContent":["import { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../common/Util.js';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisParser } from '../ogg/vorbis/VorbisParser.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nconst BlockType = {\n    STREAMINFO: 0, // STREAMINFO\n    PADDING: 1, // PADDING\n    APPLICATION: 2, // APPLICATION\n    SEEKTABLE: 3, // SEEKTABLE\n    VORBIS_COMMENT: 4, // VORBIS_COMMENT\n    CUESHEET: 5, // CUESHEET\n    PICTURE: 6 // PICTURE\n};\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisParser(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case BlockType.STREAMINFO:\n                return this.parseBlockStreamInfo(blockHeader.length);\n            case BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case BlockType.APPLICATION:\n                break;\n            case BlockType.SEEKTABLE:\n                break;\n            case BlockType.VORBIS_COMMENT:\n                return this.parseComment(blockHeader.length);\n            case BlockType.CUESHEET:\n                break;\n            case BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async parseBlockStreamInfo(dataLen) {\n        if (dataLen !== BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        const decoder = new VorbisDecoder(data, 0);\n        decoder.readStringUtf8(); // vendor (skip)\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => this.vorbisParser.addTag(tag.key, tag.value)));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        const picture = await this.tokenizer.readToken(new VorbisPictureToken(dataLen));\n        this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n}\nconst BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nconst BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n//# sourceMappingURL=FlacParser.js.map","import * as Token from 'token-types';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = new TextDecoder('utf-8').decode(this.data.subarray(this.offset, this.offset + len));\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.slice(0, idx).toUpperCase(),\n            value: v.slice(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n//# sourceMappingURL=VorbisDecoder.js.map","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map","import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggParser\n */\nexport class VorbisParser {\n    constructor(metadata, options) {\n        this.pageSegments = [];\n        this.metadata = metadata;\n        this.options = options;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisParser.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.calculateDuration(header);\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisParser.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\n            this.metadata.setFormat('duration', header.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param header\n     * @param pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n//# sourceMappingURL=VorbisParser.js.map","import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = Uint8Array.from(buffer.slice(offset, offset + picDataLen));\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n//# sourceMappingURL=Vorbis.js.map"],"names":["debug","initDebug","FlacContentError","makeUnexpectedFileContentError","BlockType","FlacParser","AbstractID3Parser","constructor","super","arguments","this","vorbisParser","VorbisParser","metadata","options","padding","postId3v2Parse","tokenizer","readToken","FourCcToken","toString","blockHeader","BlockHeader","parseDataBlock","lastBlock","fileInfo","size","format","duration","dataSize","position","setFormat","type","length","parseBlockStreamInfo","parseComment","parsePicture","addWarning","ignore","then","dataLen","BlockStreamInfo","len","streamInfo","channels","bitsPerSample","sampleRate","totalSamples","data","Uint8ArrayType","decoder","VorbisDecoder","readStringUtf8","commentListLength","readInt32","tags","Array","i","parseUserComment","Promise","all","map","tag","addTag","key","value","skipCovers","picture","VorbisPictureToken","get","buf","off","util","UINT24_BE","minimumBlockSize","UINT16_BE","maximumBlockSize","minimumFrameSize","maximumFrameSize","fileMD5","offset","Token","TextDecoder","decode","subarray","offset0","v","idx","indexOf","slice","toUpperCase","BasicParser","id3parser","ID3v2Parser","startsWithID3v2Header","peekToken","ID3v2Header","fileIdentifier","parse","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser","debugInit","VorbisContentError","pageSegments","parsePage","header","pageData","headerType","firstPage","parseFirstPage","continued","push","lastPage","fullPage","mergeUint8Arrays","parseFullPage","calculateDuration","arrays","totalSize","reduce","acc","e","merged","Uint8Array","forEach","array","_arrays","set","flush","id","fromBase64","absoluteGranulePosition","commonHeader","CommonHeader","vorbis","packetType","idHeader","IdentificationHeader","bitrateNominal","channelMode","byteLength","parseUserCommentList","strLen","userCommentListLength","base64str","fromBuffer","from","atob","c","charCodeAt","buffer","AttachedPictureType","mimeLen","descLen","description","width","height","colour_depth","indexed_color","picDataLen","uint8Array","version","bitrateMax","bitrateMin"],"sourceRoot":""}