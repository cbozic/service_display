{"version":3,"file":"static/js/723.1486084f.chunk.js","mappings":"mLAeA,MAAMA,EACF,cAAOC,CAAQC,GAAiB,IAAZC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACzB,OAAO,IAAIJ,EAAKA,EAAKO,OAAOL,EAAKC,GACrC,CAOA,aAAOI,CAAOC,GAAsB,IAAZL,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAC7B,MAAMK,EAAO,IAAIC,SAASF,EAASG,OAAQR,GAE3C,MADa,GAAHS,OAAMH,EAAKI,UAAU,GAAG,GAAMC,SAAS,IAAG,KAAAF,OAAIH,EAAKM,UAAU,GAAG,GAAMD,SAAS,IAAG,KAAAF,OAAIH,EAAKM,UAAU,GAAG,GAAMD,SAAS,IAAG,KAAAF,OAAIH,EAAKM,UAAU,GAAGD,SAAS,IAAG,KAAAF,QAAII,EAAAA,EAAAA,IAAgBR,EAASS,MAAMd,EAAS,GAAIA,EAAS,MACnNe,aAChB,CAMA,sBAAOC,CAAgBC,GACnB,OAAQA,EAAUC,KACd,KAAKrB,EAAKsB,WAAWD,IAAK,MAAO,QACjC,KAAKrB,EAAKuB,WAAWF,IAAK,MAAO,QACjC,KAAKrB,EAAKwB,aAAaH,IAAK,MAAO,UACnC,KAAKrB,EAAKyB,sBAAsBJ,IAAK,MAAO,kBAC5C,KAAKrB,EAAK0B,kBAAkBL,IAAK,MAAO,gBACxC,KAAKrB,EAAK2B,YAAYN,IAAK,MAAO,SAE1C,CAMA,aAAOO,CAAOP,GACV,MAAMnB,EAAM,IAAI2B,WAAW,IACrBpB,EAAO,IAAIC,SAASR,EAAIS,QAM9B,OALAF,EAAKqB,UAAU,EAAGC,OAAOC,SAASX,EAAIJ,MAAM,EAAG,GAAI,KAAK,GACxDR,EAAKwB,UAAU,EAAGF,OAAOC,SAASX,EAAIJ,MAAM,EAAG,IAAK,KAAK,GACzDR,EAAKwB,UAAU,EAAGF,OAAOC,SAASX,EAAIJ,MAAM,GAAI,IAAK,KAAK,GAC1Df,EAAIgC,KAAIC,EAAAA,EAAAA,IAAgBd,EAAIJ,MAAM,GAAI,KAAM,GAC5Cf,EAAIgC,KAAIC,EAAAA,EAAAA,IAAgBd,EAAIJ,MAAM,KAAM,IACjCf,CACX,CACAkC,WAAAA,CAAYf,GACRgB,KAAKhB,IAAMA,CACf,CACAiB,MAAAA,CAAOC,GACH,OAAOF,KAAKhB,MAAQkB,EAAKlB,GAC7B,CACAmB,KAAAA,GACI,OAAOxC,EAAK4B,OAAOS,KAAKhB,IAC5B,EAGJrB,EAAKyC,aAAe,IAAIzC,EAAK,wCAC7BA,EAAK0C,WAAa,IAAI1C,EAAK,wCAC3BA,EAAK2C,kBAAoB,IAAI3C,EAAK,wCAClCA,EAAK4C,YAAc,IAAI5C,EAAK,wCAC5BA,EAAK6C,uBAAyB,IAAI7C,EAAK,wCACvCA,EAAK8C,oBAAsB,IAAI9C,EAAK,wCAEpCA,EAAK+C,qBAAuB,IAAI/C,EAAK,wCACrCA,EAAKgD,uBAAyB,IAAIhD,EAAK,wCACvCA,EAAKiD,sBAAwB,IAAIjD,EAAK,wCACtCA,EAAKkD,gBAAkB,IAAIlD,EAAK,wCAChCA,EAAKmD,oBAAsB,IAAInD,EAAK,wCACpCA,EAAKoD,aAAe,IAAIpD,EAAK,wCAC7BA,EAAKqD,6BAA+B,IAAIrD,EAAK,wCAC7CA,EAAKsD,sBAAwB,IAAItD,EAAK,wCACtCA,EAAKuD,yBAA2B,IAAIvD,EAAK,wCACzCA,EAAKwD,iCAAmC,IAAIxD,EAAK,wCACjDA,EAAKyD,sBAAwB,IAAIzD,EAAK,wCACtCA,EAAK0D,8BAAgC,IAAI1D,EAAK,wCAC9CA,EAAK2D,wBAA0B,IAAI3D,EAAK,wCACxCA,EAAK4D,gCAAkC,IAAI5D,EAAK,wCAChDA,EAAK6D,uBAAyB,IAAI7D,EAAK,wCACvCA,EAAK8D,cAAgB,IAAI9D,EAAK,wCAE9BA,EAAK+D,+BAAiC,IAAI/D,EAAK,wCAC/CA,EAAKgE,8BAAgC,IAAIhE,EAAK,wCAC9CA,EAAKiE,2BAA6B,IAAIjE,EAAK,wCAC3CA,EAAKkE,2BAA6B,IAAIlE,EAAK,wCAC3CA,EAAKmE,uBAAyB,IAAInE,EAAK,wCACvCA,EAAKoE,mBAAqB,IAAIpE,EAAK,wCACnCA,EAAKqE,eAAiB,IAAIrE,EAAK,wCAC/BA,EAAKsE,sBAAwB,IAAItE,EAAK,wCACtCA,EAAKuE,sBAAwB,IAAIvE,EAAK,wCACtCA,EAAKwE,iCAAmC,IAAIxE,EAAK,wCACjDA,EAAKyE,8BAAgC,IAAIzE,EAAK,wCAC9CA,EAAK0E,oBAAsB,IAAI1E,EAAK,wCACpCA,EAAK2E,gCAAkC,IAAI3E,EAAK,wCAEhDA,EAAKsB,WAAa,IAAItB,EAAK,wCAC3BA,EAAKuB,WAAa,IAAIvB,EAAK,wCAC3BA,EAAKwB,aAAe,IAAIxB,EAAK,wCAC7BA,EAAK4E,WAAa,IAAI5E,EAAK,wCAC3BA,EAAKyB,sBAAwB,IAAIzB,EAAK,wCACtCA,EAAK0B,kBAAoB,IAAI1B,EAAK,wCAClCA,EAAK2B,YAAc,IAAI3B,EAAK,wCAC5BA,EAAK6E,6BAA+B,IAAI7E,EAAK,wCAC7C,U,uBChHO,SAAS8E,EAAiBC,GAC7B,OAAOC,EAAAA,GAAgBA,EAAAA,GAAkBD,EAAY,YACzD,CACA,MAAME,EAAmB,CACrBH,EACAI,EAUJ,SAAuBC,GAAiB,IAAZhF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACjC,OAAsC,IAA/BgF,EAAcD,EAAKhF,EAC9B,EACA,SAAwBgF,GAAiB,IAAZhF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClC,OAAOiF,EAAAA,UAAgBC,IAAIH,EAAKhF,EACpC,EACA,SAAwBgF,GAAiB,IAAZhF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClC,OAAOiF,EAAAA,UAAgBC,IAAIH,EAAKhF,EACpC,EAdIiF,EACAF,GAEJ,SAASA,EAAmBC,GACxB,OAAO,IAAItD,WAAWsD,EAC1B,CAUA,SAASC,EAAcD,GAAiB,IAAZhF,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACjC,OAAOiF,EAAAA,UAAgBC,IAAIH,EAAKhF,EACpC,C,wBCxBO,MAAMoF,WAA6BC,EAAAA,EAAAA,IAA+B,SAKlE,MA8BMC,EAA4B,CACrCC,IAAK,GACLJ,IAAKA,CAACH,EAAKQ,KACA,CACHnF,SAAUR,EAAKC,QAAQkF,EAAKQ,GAC5BC,WAAY7D,OAAOsD,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,KAClDE,sBAAuBR,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,OASrDG,EAAoB,CAC7BJ,IAAK,GACLJ,IAAKA,CAACH,EAAKQ,KACA,CACHnF,SAAUR,EAAKC,QAAQkF,EAAKQ,GAC5BC,WAAY7D,OAAOsD,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,QAIvD,MAAMI,EACT3D,WAAAA,CAAY4D,GACR3D,KAAKqD,IAAM3D,OAAOiE,EAAOJ,YAAcE,EAAkBJ,GAC7D,CACAO,cAAAA,CAAeC,EAAMC,EAAMC,EAAWC,GAClC,GAAa,eAATF,EACAD,EAAKI,KAAK,CAAEC,GAAIJ,EAAMK,MAAOC,EAAeC,WAAWL,SAEtD,CACD,MAAMM,EDxEP1B,ECwEoCmB,GACnC,IAAKO,EACD,MAAM,IAAIpB,EAAqB,gCAAD3E,OAAiCwF,IAEnEF,EAAKI,KAAK,CAAEC,GAAIJ,EAAMK,MAAOG,EAAUN,IAC3C,CACJ,EAGG,MAAMO,UAA0Bb,EACnCT,GAAAA,CAAIH,EAAKQ,GACL,OAAO,IACX,EAMG,MAAM5C,UAA6BgD,EACtCT,GAAAA,CAAIH,EAAKQ,GACL,MAAO,CACHkB,OAAQ7G,EAAKC,QAAQkF,EAAKQ,GAC1BmB,SAAUzB,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IACzCoB,aAAc1B,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IAC7CqB,iBAAkB3B,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IACjDsB,aAAc5B,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IAC7CuB,aAAc7B,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IAC7CwB,QAAS9B,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IACxCyB,MAAO,CACHC,UAAWrC,EAAAA,GAAYG,EAAKQ,EAAM,GAAI,IACtC2B,SAAUtC,EAAAA,GAAYG,EAAKQ,EAAM,GAAI,KAGzC4B,sBAAuBlC,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IACtD6B,sBAAuBnC,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IACtD8B,eAAgBpC,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,IAEvD,EAEJ5C,EAAqBR,KAAOvC,EAAK+C,qBAK1B,MAAMC,UAA+B+C,EACxCT,GAAAA,CAAIH,EAAKQ,GACL,MAAO,CACH+B,WAAY1H,EAAKmB,gBAAgBnB,EAAKC,QAAQkF,EAAKQ,IACnDgC,oBAAqB3H,EAAKC,QAAQkF,EAAKQ,EAAM,GAGrD,EAEJ3C,EAAuBT,KAAOvC,EAAKgD,uBAK5B,MAAMC,EACTb,WAAAA,GACIC,KAAKqD,IAAM,EACf,CACAJ,GAAAA,CAAIH,EAAKQ,GACL,MAAMlF,EAAO,IAAIC,SAASyE,EAAIxE,OAAQgF,GACtC,MAAO,CACHiC,UAAW5H,EAAKC,QAAQkF,EAAKQ,GAC7BkC,UAAWpH,EAAKM,UAAU,IAAI,GAC9B+G,kBAAmBrH,EAAKM,UAAU,IAAI,GAE9C,EAEJkC,EAAsBV,KAAOvC,EAAKiD,sBAKlC,MAAM8E,EAAwB,CAC1BrC,IAAK,GACLJ,IAAKA,CAACH,EAAKQ,KAEA,CACHqC,WAFS,IAAItH,SAASyE,EAAIxE,OAAQgF,GAEjB5E,UAAU,IAAI,MAI3CkH,eAAeC,EAAWC,GACtB,MAAM9H,QAAe8H,EAAUC,WAAW/C,EAAAA,WAC1C,aAAc8C,EAAUE,UAAU,IAAIhD,EAAAA,WAA0B,EAAThF,EAAY,cAAciI,QAAQ,KAAM,GACnG,CAKOL,eAAeM,EAAiBJ,GACnC,MAAMK,QAAoBL,EAAUE,UAAUN,GACxCU,EAAU,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYR,aAAcU,EAC1CD,EAAQnC,WAAWqC,EAAeR,IAEtC,OAAOM,CACX,CACAR,eAAeW,EAAgBT,GAC3B,MAAM9H,QAAe8H,EAAUC,WAAW/C,EAAAA,WACpCF,EAAM,IAAItD,WAAWxB,GAE3B,aADM8H,EAAUU,WAAW1D,GACpBA,CACX,CAKA8C,eAAeU,EAAeR,GAC1B,MAAMW,QAAaX,EAAUC,WAAW/C,EAAAA,WACxC,MAAO,CACHyD,KAAM,CACFC,WAAgC,KAAZ,EAAPD,GACbE,WAAgC,KAAZ,EAAPF,IAEjBG,gBAAiBf,EAAWC,GAC5Be,kBAAmBhB,EAAWC,GAC9BgB,kBAAmBP,EAAgBT,GAE3C,CAKO,MAAMiB,UAAsCrD,EAC/CT,GAAAA,CAAIH,EAAKQ,GACL,MAAMO,EAAO,GACPzF,EAAO,IAAIC,SAASyE,EAAIxE,OAAQgF,GACtC,IAAI0D,EAAM,GACV,IAAK,IAAIX,EAAI,EAAGA,EAAIU,EAA8BE,gBAAgBjJ,SAAUqI,EAAG,CAC3E,MAAMrI,EAASI,EAAKM,UAAc,EAAJ2H,GAAO,GACrC,GAAIrI,EAAS,EAAG,CACZ,MAAMkJ,EAAUH,EAA8BE,gBAAgBZ,GACxDc,EAAMH,EAAMhJ,EAClB6F,EAAKI,KAAK,CAAEC,GAAIgD,EAAS/C,MAAO1B,EAAiBK,EAAIlE,MAAM0E,EAAM0D,EAAK1D,EAAM6D,MAC5EH,EAAMG,CACV,CACJ,CACA,OAAOtD,CACX,EAEJkD,EAA8B7G,KAAOvC,EAAKuD,yBAC1C6F,EAA8BE,gBAAkB,CAAC,QAAS,SAAU,YAAa,cAAe,UAKzF,MAAMG,UAA8C1D,EACvDT,GAAAA,CAAIH,EAAKQ,GACL,MAAMO,EAAO,GACPzF,EAAO,IAAIC,SAASyE,EAAIxE,OAAQgF,GAChC+D,EAAYjJ,EAAKM,UAAU,GAAG,GACpC,IAAIsI,EAAM,EACV,IAAK,IAAIX,EAAI,EAAGA,EAAIgB,EAAWhB,GAAK,EAAG,CACnC,MAAMiB,EAAUlJ,EAAKM,UAAUsI,GAAK,GACpCA,GAAO,EACP,MAAMlD,EAAOrB,EAAiBK,EAAIlE,MAAM0E,EAAM0D,EAAK1D,EAAM0D,EAAMM,IAC/DN,GAAOM,EACP,MAAMvD,EAAY3F,EAAKM,UAAUsI,GAAK,GACtCA,GAAO,EACP,MAAMO,EAAWnJ,EAAKM,UAAUsI,GAAK,GACrCA,GAAO,EACP,MAAM7C,EAAQrB,EAAIlE,MAAM0E,EAAM0D,EAAK1D,EAAM0D,EAAMO,GAC/CP,GAAOO,EACPvH,KAAK4D,eAAeC,EAAMC,EAAMC,EAAWI,EAC/C,CACA,OAAON,CACX,EAEJuD,EAAsClH,KAAOvC,EAAKwD,iCAK3C,MAAMqG,UAA4C9D,EACrDT,GAAAA,CAAIH,EAAKQ,GACL,MAAMlF,EAAO,IAAIC,SAASyE,EAAIxE,OAAQgF,GACtC,MAAO,CACHmE,UAAWzE,EAAAA,UAAgBC,IAAIH,EAAKQ,GACpCoE,QAAS1E,EAAAA,UAAgBC,IAAIH,EAAKQ,EAAM,GACxCqE,YAAavJ,EAAKwJ,SAAS,IAAI,GAC/BC,WAAYzJ,EAAKwJ,SAAS,IAAI,GAC9BE,sBAAuB1J,EAAKwJ,SAAS,IAAI,GACzCG,qBAAsB3J,EAAKwJ,SAAS,IAAI,GACxCI,oBAAqB5J,EAAKwJ,SAAS,IAAI,GACvCK,+BAAgC7J,EAAKwJ,SAAS,IAAI,GAClDM,kBAAmB9J,EAAKwJ,SAAS,IAAI,GACrC7C,MAAO,CACHoD,aAAcxF,EAAAA,GAAYG,EAAKQ,EAAM,GAAI,GACzC8E,aAAczF,EAAAA,GAAYG,EAAKQ,EAAM,GAAI,GACzC+E,0BAA2B1F,EAAAA,GAAYG,EAAKQ,EAAM,GAAI,IAG1DgF,aAAclK,EAAKmK,SAAS,IAAI,GAChCC,iBAAkBpK,EAAKmK,SAAS,IAAI,GACpCE,oBAAqBrK,EAAKwJ,SAAS,IAAI,GACvCc,gBAAiBtK,EAAKwJ,SAAS,IAAI,GACnCe,wBAAyBvK,EAAKwJ,SAAS,IAAI,GAC3CgB,YAAa,GACbC,uBAAwB,KAEhC,EAEJrB,EAAoCtH,KAAOvC,EAAK+D,+BAKzC,MAAMoH,UAA4BpF,EACrCT,GAAAA,CAAIP,EAAYY,GACZ,MAAMO,EAAO,GACPzF,EAAO,IAAIC,SAASqE,EAAWpE,OAAQgF,GACvCyF,EAA0B3K,EAAKM,UAAU,GAAG,GAClD,IAAIsI,EAAM,EACV,IAAK,IAAIX,EAAI,EAAGA,EAAI0C,EAAyB1C,GAAK,EAAG,CACjDW,GAAO,EACP,MAAMM,EAAUlJ,EAAKM,UAAUsI,GAAK,GACpCA,GAAO,EACP,MAAMgC,EAAW5K,EAAKM,UAAUsI,GAAK,GACrCA,GAAO,EACP,MAAMiC,EAAU7K,EAAKI,UAAUwI,GAAK,GACpCA,GAAO,EACP,MAAMlD,EAAOrB,EAAiBC,EAAW9D,MAAM0E,EAAM0D,EAAK1D,EAAM0D,EAAMM,IACtEN,GAAOM,EACP,MAAMtD,EAAOtB,EAAW9D,MAAM0E,EAAM0D,EAAK1D,EAAM0D,EAAMiC,GACrDjC,GAAOiC,EACPjJ,KAAK4D,eAAeC,EAAMC,EAAMkF,EAAUhF,EAC9C,CACA,OAAOH,CACX,EAEJiF,EAAoB5I,KAAOvC,EAAKqE,eAEzB,MAAMkH,UAAmCJ,GAEhDI,EAA2BhJ,KAAOvC,EAAKsE,sBAIhC,MAAMmC,EACT,iBAAOC,CAAW/F,GAEd,OADY,IAAI8F,EAAe9F,EAAON,QAC3BiF,IAAI3E,EAAQ,EAC3B,CACAyB,WAAAA,CAAYsD,GACRrD,KAAKqD,IAAMA,CACf,CACAJ,GAAAA,CAAI3E,EAAQR,GACR,MAAMM,EAAO,IAAIC,SAASC,EAAOA,OAAQR,GACnCqL,EAAS/K,EAAKgL,SAAS,GACvBC,EAAOjL,EAAKwJ,SAAS,GAAG,GAC9B,IAAI0B,EAAQ,EACZ,KAAiC,IAA1BlL,EAAKM,UAAU4K,IAClBA,GAAS,EAEb,MAAMC,EAAS,IAAIvG,EAAAA,WAAiBsG,EAAQ,EAAG,YAAYrG,IAAI3E,EAAQ,GACvE,KAAiC,IAA1BF,EAAKM,UAAU4K,IAClBA,GAAS,EAEb,MAAMzC,EAAc,IAAI7D,EAAAA,WAAiBsG,EAAQ,EAAG,YAAYrG,IAAI3E,EAAQ,GAC5E,MAAO,CACHmI,KAAM+C,EAAAA,GAAoBL,GAC1BI,SACA1C,cACAwC,OACArF,KAAM1F,EAAOM,MAAM0K,EAAQ,GAEnC,E,cCnVJ,MAAMG,EAAQC,EAAU,6BAYjB,MAAMC,UAAkBC,EAAAA,EAC3B,WAAMC,GACF,MAAMlG,QAAe3D,KAAK8F,UAAUE,UAAU8D,GAC9C,IAAKnG,EAAOxF,SAAS8B,OAAOtC,EAAKyC,cAC7B,MAAM,IAAI8C,EAAqB,gDAAD3E,OAAiDoF,EAAOxF,SAASa,MAEnG,UACUgB,KAAK+J,kBAAkBpG,EAAOH,sBACxC,CACA,MAAOwG,GACHP,EAAM,8BAA+BO,EACzC,CACJ,CACA,uBAAMD,CAAkBE,GACpB,IAAIpG,EACJ,EAAG,CAEC,MAAMF,QAAe3D,KAAK8F,UAAUE,UAAU8D,GAG9C,OADAL,EAAM,iBAAkB9F,EAAOxF,SAASa,KAChC2E,EAAOxF,SAASa,KACpB,KAAK8K,EAA+B5J,KAAKlB,IAAK,CAC1C,MAAMkL,QAAYlK,KAAK8F,UAAUE,UAAU,IAAI8D,EAA+BnG,IAC9E3D,KAAKmK,SAASC,UAAU,WAAY1K,OAAOwK,EAAItF,aAAeyF,OAAO,MAAS,IAAQ3K,OAAOwK,EAAIpF,SAAW,KAC5G9E,KAAKmK,SAASC,UAAU,UAAWF,EAAI9E,gBACvC,KACJ,CACA,KAAK0E,EAAiC5J,KAAKlB,IAAK,CAC5C,MAAMsL,QAAYtK,KAAK8F,UAAUE,UAAU,IAAI8D,EAAiCnG,IAChF3D,KAAKmK,SAASC,UAAU,YAAa,OAAF7L,OAAS+L,EAAIjF,aAChD,KACJ,CACA,KAAKyE,EAAgC5J,KAAKlB,IAAK,CAC3C,MAAMuL,QAAkBvK,KAAK8F,UAAUE,UAAU,IAAI8D,SAC/C9J,KAAKwK,qBAAqBD,EAAU9E,mBAC1C,KACJ,CACA,KAAKqE,EAAwC5J,KAAKlB,IAC9C6E,QAAa7D,KAAK8F,UAAUE,UAAU,IAAI8D,EAAwCnG,UAC5E3D,KAAKyK,QAAQ5G,GACnB,MACJ,KAAKiG,EAAgD5J,KAAKlB,IACtD6E,QAAa7D,KAAK8F,UAAUE,UAAU,IAAI8D,EAAgDnG,UACpF3D,KAAKyK,QAAQ5G,GACnB,MACJ,KAAKlG,EAAKkD,gBAAgB7B,IAAK,CAC3B,MAAM0L,QAAeZ,EAA2B9J,KAAK8F,WACrD4E,EAAOC,SAAQC,IACX5K,KAAKmK,SAASU,cAAc,CACxBpE,KAAMmE,EAAMnE,KAAKC,WAAaoE,EAAAA,EAAUC,MAAQD,EAAAA,EAAUE,MAC1DpE,UAAWgE,EAAMhE,WACnB,IAEN,MAAMqE,EAAcP,EAAOQ,QAAON,GAASA,EAAMnE,KAAKE,aAAYwE,KAAIP,GAASA,EAAMhE,YAAWwE,KAAK,KACrGpL,KAAKmK,SAASC,UAAU,QAASa,GACjC,KACJ,CACA,KAAKtN,EAAK0D,8BAA8BrC,UAE9BgB,KAAK8F,UAAUuF,OAAO1H,EAAOJ,WAAauG,EAA4BzG,KAC5E,MACJ,KAAK1F,EAAK8D,cAAczC,IAEpByK,EAAM,oBAAqB9F,EAAOJ,WAAauG,EAA4BzG,WACrErD,KAAK8F,UAAUuF,OAAO1H,EAAOJ,WAAauG,EAA4BzG,KAC5E,MACJ,QACIrD,KAAKmK,SAASmB,WAAW,2BAAD/M,OAA4BoF,EAAOxF,SAASa,MACpEyK,EAAM,6BAA8B9F,EAAOxF,SAASa,WAC9CgB,KAAK8F,UAAUE,UAAU,IAAI8D,EAA4BnG,IAE3E,SAAWsG,EAEf,CACA,aAAMQ,CAAQ5G,SACJ0H,QAAQC,IAAI3H,EAAKsH,KAAIM,IAAA,IAAC,GAAEvH,EAAE,MAAEC,GAAOsH,EAAA,OAAKzL,KAAKmK,SAASuB,OAtFjD,MAsFoExH,EAAIC,EAAM,IAC7F,CACA,0BAAMqG,CAAqBmB,GACvB,EAAG,CAEC,MAAMhI,QAAe3D,KAAK8F,UAAUE,UAAU8D,GACxC8B,EAAYjI,EAAOJ,WAAauG,EAA4BzG,IAElE,OAAQM,EAAOxF,SAASa,KACpB,KAAK8K,EAA8C5J,KAAKlB,UAE9CgB,KAAK8F,UAAUE,UAAU,IAAI8D,EAA8CnG,IACjF,MACJ,KAAKmG,EAA8B5J,KAAKlB,IAAK,CACzC,MAAM6M,QAAe7L,KAAK8F,UAAUE,UAAU,IAAI8D,EAA8BnG,UAC1E3D,KAAKyK,QAAQoB,GACnB,KACJ,CACA,KAAK/B,EAAqC5J,KAAKlB,IAAK,CAChD,MAAM8M,QAAe9L,KAAK8F,UAAUE,UAAU,IAAI8D,EAAqCnG,UACjF3D,KAAKyK,QAAQqB,GACnB,KACJ,CACA,KAAKnO,EAAK8D,cAAczC,IAIxB,KAAKrB,EAAK0E,oBAAoBrD,IAG9B,KAAKrB,EAAK6E,6BAA6BxD,UAC7BgB,KAAK8F,UAAUuF,OAAOO,GAC5B,MACJ,QACI5L,KAAKmK,SAASmB,WAAW,2BAAD/M,OAA4BoF,EAAOxF,SAASa,YAE9DgB,KAAK8F,UAAUE,UAAU,IAAI8D,EAA4BnG,IAGvEgI,GAAiBhI,EAAOJ,UAC5B,OAASoI,EAAgB,EAC7B,E","sources":["../node_modules/music-metadata/lib/asf/GUID.js","../node_modules/music-metadata/lib/asf/AsfUtil.js","../node_modules/music-metadata/lib/asf/AsfObject.js","../node_modules/music-metadata/lib/asf/AsfParser.js"],"sourcesContent":["import { hexToUint8Array, uint8ArrayToHex } from 'uint8array-extras';\n/**\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n *\n * ASF File Structure:\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n *\n * ASF GUIDs:\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n * - https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c\n */\nclass GUID {\n    static fromBin(bin, offset = 0) {\n        return new GUID(GUID.decode(bin, offset));\n    }\n    /**\n     * Decode GUID in format like \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\n     * @param objectId Binary GUID\n     * @param offset Read offset in bytes, default 0\n     * @returns GUID as dashed hexadecimal representation\n     */\n    static decode(objectId, offset = 0) {\n        const view = new DataView(objectId.buffer, offset);\n        const guid = `${view.getUint32(0, true).toString(16)}-${view.getUint16(4, true).toString(16)}-${view.getUint16(6, true).toString(16)}-${view.getUint16(8).toString(16)}-${uint8ArrayToHex(objectId.slice(offset + 10, offset + 16))}`;\n        return guid.toUpperCase();\n    }\n    /**\n     * Decode stream type\n     * @param mediaType Media type GUID\n     * @returns Media type\n     */\n    static decodeMediaType(mediaType) {\n        switch (mediaType.str) {\n            case GUID.AudioMedia.str: return 'audio';\n            case GUID.VideoMedia.str: return 'video';\n            case GUID.CommandMedia.str: return 'command';\n            case GUID.Degradable_JPEG_Media.str: return 'degradable-jpeg';\n            case GUID.FileTransferMedia.str: return 'file-transfer';\n            case GUID.BinaryMedia.str: return 'binary';\n        }\n    }\n    /**\n     * Encode GUID\n     * @param guid GUID like: \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\n     * @returns Encoded Binary GUID\n     */\n    static encode(str) {\n        const bin = new Uint8Array(16);\n        const view = new DataView(bin.buffer);\n        view.setUint32(0, Number.parseInt(str.slice(0, 8), 16), true);\n        view.setUint16(4, Number.parseInt(str.slice(9, 13), 16), true);\n        view.setUint16(6, Number.parseInt(str.slice(14, 18), 16), true);\n        bin.set(hexToUint8Array(str.slice(19, 23)), 8);\n        bin.set(hexToUint8Array(str.slice(24)), 10);\n        return bin;\n    }\n    constructor(str) {\n        this.str = str;\n    }\n    equals(guid) {\n        return this.str === guid.str;\n    }\n    toBin() {\n        return GUID.encode(this.str);\n    }\n}\n// 10.1 Top-level ASF object GUIDs\nGUID.HeaderObject = new GUID(\"75B22630-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.DataObject = new GUID(\"75B22636-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.SimpleIndexObject = new GUID(\"33000890-E5B1-11CF-89F4-00A0C90349CB\");\nGUID.IndexObject = new GUID(\"D6E229D3-35DA-11D1-9034-00A0C90349BE\");\nGUID.MediaObjectIndexObject = new GUID(\"FEB103F8-12AD-4C64-840F-2A1D2F7AD48C\");\nGUID.TimecodeIndexObject = new GUID(\"3CB73FD0-0C4A-4803-953D-EDF7B6228F0C\");\n// 10.2 Header Object GUIDs\nGUID.FilePropertiesObject = new GUID(\"8CABDCA1-A947-11CF-8EE4-00C00C205365\");\nGUID.StreamPropertiesObject = new GUID(\"B7DC0791-A9B7-11CF-8EE6-00C00C205365\");\nGUID.HeaderExtensionObject = new GUID(\"5FBF03B5-A92E-11CF-8EE3-00C00C205365\");\nGUID.CodecListObject = new GUID(\"86D15240-311D-11D0-A3A4-00A0C90348F6\");\nGUID.ScriptCommandObject = new GUID(\"1EFB1A30-0B62-11D0-A39B-00A0C90348F6\");\nGUID.MarkerObject = new GUID(\"F487CD01-A951-11CF-8EE6-00C00C205365\");\nGUID.BitrateMutualExclusionObject = new GUID(\"D6E229DC-35DA-11D1-9034-00A0C90349BE\");\nGUID.ErrorCorrectionObject = new GUID(\"75B22635-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.ContentDescriptionObject = new GUID(\"75B22633-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.ExtendedContentDescriptionObject = new GUID(\"D2D0A440-E307-11D2-97F0-00A0C95EA850\");\nGUID.ContentBrandingObject = new GUID(\"2211B3FA-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.StreamBitratePropertiesObject = new GUID(\"7BF875CE-468D-11D1-8D82-006097C9A2B2\");\nGUID.ContentEncryptionObject = new GUID(\"2211B3FB-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.ExtendedContentEncryptionObject = new GUID(\"298AE614-2622-4C17-B935-DAE07EE9289C\");\nGUID.DigitalSignatureObject = new GUID(\"2211B3FC-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.PaddingObject = new GUID(\"1806D474-CADF-4509-A4BA-9AABCB96AAE8\");\n// 10.3 Header Extension Object GUIDs\nGUID.ExtendedStreamPropertiesObject = new GUID(\"14E6A5CB-C672-4332-8399-A96952065B5A\");\nGUID.AdvancedMutualExclusionObject = new GUID(\"A08649CF-4775-4670-8A16-6E35357566CD\");\nGUID.GroupMutualExclusionObject = new GUID(\"D1465A40-5A79-4338-B71B-E36B8FD6C249\");\nGUID.StreamPrioritizationObject = new GUID(\"D4FED15B-88D3-454F-81F0-ED5C45999E24\");\nGUID.BandwidthSharingObject = new GUID(\"A69609E6-517B-11D2-B6AF-00C04FD908E9\");\nGUID.LanguageListObject = new GUID(\"7C4346A9-EFE0-4BFC-B229-393EDE415C85\");\nGUID.MetadataObject = new GUID(\"C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA\");\nGUID.MetadataLibraryObject = new GUID(\"44231C94-9498-49D1-A141-1D134E457054\");\nGUID.IndexParametersObject = new GUID(\"D6E229DF-35DA-11D1-9034-00A0C90349BE\");\nGUID.MediaObjectIndexParametersObject = new GUID(\"6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7\");\nGUID.TimecodeIndexParametersObject = new GUID(\"F55E496D-9797-4B5D-8C8B-604DFE9BFB24\");\nGUID.CompatibilityObject = new GUID(\"26F18B5D-4584-47EC-9F5F-0E651F0452C9\");\nGUID.AdvancedContentEncryptionObject = new GUID(\"43058533-6981-49E6-9B74-AD12CB86D58C\");\n// 10.4 Stream Properties Object Stream Type GUIDs\nGUID.AudioMedia = new GUID(\"F8699E40-5B4D-11CF-A8FD-00805F5C442B\");\nGUID.VideoMedia = new GUID(\"BC19EFC0-5B4D-11CF-A8FD-00805F5C442B\");\nGUID.CommandMedia = new GUID(\"59DACFC0-59E6-11D0-A3AC-00A0C90348F6\");\nGUID.JFIF_Media = new GUID(\"B61BE100-5B4E-11CF-A8FD-00805F5C442B\");\nGUID.Degradable_JPEG_Media = new GUID(\"35907DE0-E415-11CF-A917-00805F5C442B\");\nGUID.FileTransferMedia = new GUID(\"91BD222C-F21C-497A-8B6D-5AA86BFC0185\");\nGUID.BinaryMedia = new GUID(\"3AFB65E2-47EF-40F2-AC2C-70A90D71D343\");\nGUID.ASF_Index_Placeholder_Object = new GUID(\"D9AADE20-7C17-4F9C-BC28-8555DD98E2A2\");\nexport default GUID;\n//# sourceMappingURL=GUID.js.map","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nexport function getParserForAttr(i) {\n    return attributeParsers[i];\n}\nexport function parseUnicodeAttr(uint8Array) {\n    return util.stripNulls(util.decodeString(uint8Array, 'utf-16le'));\n}\nconst attributeParsers = [\n    parseUnicodeAttr,\n    parseByteArrayAttr,\n    parseBoolAttr,\n    parseDWordAttr,\n    parseQWordAttr,\n    parseWordAttr,\n    parseByteArrayAttr\n];\nfunction parseByteArrayAttr(buf) {\n    return new Uint8Array(buf);\n}\nfunction parseBoolAttr(buf, offset = 0) {\n    return parseWordAttr(buf, offset) === 1;\n}\nfunction parseDWordAttr(buf, offset = 0) {\n    return Token.UINT32_LE.get(buf, offset);\n}\nfunction parseQWordAttr(buf, offset = 0) {\n    return Token.UINT64_LE.get(buf, offset);\n}\nfunction parseWordAttr(buf, offset = 0) {\n    return Token.UINT16_LE.get(buf, offset);\n}\n//# sourceMappingURL=AsfUtil.js.map","// ASF Objects\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport GUID from './GUID.js';\nimport { getParserForAttr, parseUnicodeAttr } from './AsfUtil.js';\nimport { AttachedPictureType } from '../id3v2/ID3v2Token.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class AsfContentParseError extends makeUnexpectedFileContentError('ASF') {\n}\n/**\n * Data Type: Specifies the type of information being stored. The following values are recognized.\n */\nexport const DataType = {\n    /**\n     * Unicode string. The data consists of a sequence of Unicode characters.\n     */\n    UnicodeString: 0,\n    /**\n     * BYTE array. The type of data is implementation-specific.\n     */\n    ByteArray: 1,\n    /**\n     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.\n     */\n    Bool: 2,\n    /**\n     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.\n     */\n    DWord: 3,\n    /**\n     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.\n     */\n    QWord: 4,\n    /**\n     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.\n     */\n    Word: 5\n};\n/**\n * Token for: 3. ASF top-level Header Object\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3\n */\nexport const TopLevelHeaderObjectToken = {\n    len: 30,\n    get: (buf, off) => {\n        return {\n            objectId: GUID.fromBin(buf, off),\n            objectSize: Number(Token.UINT64_LE.get(buf, off + 16)),\n            numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)\n            // Reserved: 2 bytes\n        };\n    }\n};\n/**\n * Token for: 3.1 Header Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1\n */\nexport const HeaderObjectToken = {\n    len: 24,\n    get: (buf, off) => {\n        return {\n            objectId: GUID.fromBin(buf, off),\n            objectSize: Number(Token.UINT64_LE.get(buf, off + 16))\n        };\n    }\n};\nexport class State {\n    constructor(header) {\n        this.len = Number(header.objectSize) - HeaderObjectToken.len;\n    }\n    postProcessTag(tags, name, valueType, data) {\n        if (name === 'WM/Picture') {\n            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });\n        }\n        else {\n            const parseAttr = getParserForAttr(valueType);\n            if (!parseAttr) {\n                throw new AsfContentParseError(`unexpected value headerType: ${valueType}`);\n            }\n            tags.push({ id: name, value: parseAttr(data) });\n        }\n    }\n}\n// ToDo: use ignore type\nexport class IgnoreObjectState extends State {\n    get(buf, off) {\n        return null;\n    }\n}\n/**\n * Token for: 3.2: File Properties Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2\n */\nexport class FilePropertiesObject extends State {\n    get(buf, off) {\n        return {\n            fileId: GUID.fromBin(buf, off),\n            fileSize: Token.UINT64_LE.get(buf, off + 16),\n            creationDate: Token.UINT64_LE.get(buf, off + 24),\n            dataPacketsCount: Token.UINT64_LE.get(buf, off + 32),\n            playDuration: Token.UINT64_LE.get(buf, off + 40),\n            sendDuration: Token.UINT64_LE.get(buf, off + 48),\n            preroll: Token.UINT64_LE.get(buf, off + 56),\n            flags: {\n                broadcast: util.getBit(buf, off + 64, 24),\n                seekable: util.getBit(buf, off + 64, 25)\n            },\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n            minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),\n            maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),\n            maximumBitrate: Token.UINT32_LE.get(buf, off + 76)\n        };\n    }\n}\nFilePropertiesObject.guid = GUID.FilePropertiesObject;\n/**\n * Token for: 3.3 Stream Properties Object (mandatory, one per stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3\n */\nexport class StreamPropertiesObject extends State {\n    get(buf, off) {\n        return {\n            streamType: GUID.decodeMediaType(GUID.fromBin(buf, off)),\n            errorCorrectionType: GUID.fromBin(buf, off + 8)\n            // ToDo\n        };\n    }\n}\nStreamPropertiesObject.guid = GUID.StreamPropertiesObject;\n/**\n * 3.4: Header Extension Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4\n */\nexport class HeaderExtensionObject {\n    constructor() {\n        this.len = 22;\n    }\n    get(buf, off) {\n        const view = new DataView(buf.buffer, off);\n        return {\n            reserved1: GUID.fromBin(buf, off),\n            reserved2: view.getUint16(16, true),\n            extensionDataSize: view.getUint16(18, true)\n        };\n    }\n}\nHeaderExtensionObject.guid = GUID.HeaderExtensionObject;\n/**\n * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\n */\nconst CodecListObjectHeader = {\n    len: 20,\n    get: (buf, off) => {\n        const view = new DataView(buf.buffer, off);\n        return {\n            entryCount: view.getUint16(16, true)\n        };\n    }\n};\nasync function readString(tokenizer) {\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\n    return (await tokenizer.readToken(new Token.StringType(length * 2, 'utf-16le'))).replace('\\0', '');\n}\n/**\n * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\n */\nexport async function readCodecEntries(tokenizer) {\n    const codecHeader = await tokenizer.readToken(CodecListObjectHeader);\n    const entries = [];\n    for (let i = 0; i < codecHeader.entryCount; ++i) {\n        entries.push(await readCodecEntry(tokenizer));\n    }\n    return entries;\n}\nasync function readInformation(tokenizer) {\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\n    const buf = new Uint8Array(length);\n    await tokenizer.readBuffer(buf);\n    return buf;\n}\n/**\n * Read Codec-Entries\n * @param tokenizer\n */\nasync function readCodecEntry(tokenizer) {\n    const type = await tokenizer.readNumber(Token.UINT16_LE);\n    return {\n        type: {\n            videoCodec: (type & 0x0001) === 0x0001,\n            audioCodec: (type & 0x0002) === 0x0002\n        },\n        codecName: await readString(tokenizer),\n        description: await readString(tokenizer),\n        information: await readInformation(tokenizer)\n    };\n}\n/**\n * 3.10 Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10\n */\nexport class ContentDescriptionObjectState extends State {\n    get(buf, off) {\n        const tags = [];\n        const view = new DataView(buf.buffer, off);\n        let pos = 10;\n        for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {\n            const length = view.getUint16(i * 2, true);\n            if (length > 0) {\n                const tagName = ContentDescriptionObjectState.contentDescTags[i];\n                const end = pos + length;\n                tags.push({ id: tagName, value: parseUnicodeAttr(buf.slice(off + pos, off + end)) });\n                pos = end;\n            }\n        }\n        return tags;\n    }\n}\nContentDescriptionObjectState.guid = GUID.ContentDescriptionObject;\nContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];\n/**\n * 3.11 Extended Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11\n */\nexport class ExtendedContentDescriptionObjectState extends State {\n    get(buf, off) {\n        const tags = [];\n        const view = new DataView(buf.buffer, off);\n        const attrCount = view.getUint16(0, true);\n        let pos = 2;\n        for (let i = 0; i < attrCount; i += 1) {\n            const nameLen = view.getUint16(pos, true);\n            pos += 2;\n            const name = parseUnicodeAttr(buf.slice(off + pos, off + pos + nameLen));\n            pos += nameLen;\n            const valueType = view.getUint16(pos, true);\n            pos += 2;\n            const valueLen = view.getUint16(pos, true);\n            pos += 2;\n            const value = buf.slice(off + pos, off + pos + valueLen);\n            pos += valueLen;\n            this.postProcessTag(tags, name, valueType, value);\n        }\n        return tags;\n    }\n}\nExtendedContentDescriptionObjectState.guid = GUID.ExtendedContentDescriptionObject;\n/**\n * 4.1 Extended Stream Properties Object (optional, 1 per media stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1\n */\nexport class ExtendedStreamPropertiesObjectState extends State {\n    get(buf, off) {\n        const view = new DataView(buf.buffer, off);\n        return {\n            startTime: Token.UINT64_LE.get(buf, off),\n            endTime: Token.UINT64_LE.get(buf, off + 8),\n            dataBitrate: view.getInt32(12, true),\n            bufferSize: view.getInt32(16, true),\n            initialBufferFullness: view.getInt32(20, true),\n            alternateDataBitrate: view.getInt32(24, true),\n            alternateBufferSize: view.getInt32(28, true),\n            alternateInitialBufferFullness: view.getInt32(32, true),\n            maximumObjectSize: view.getInt32(36, true),\n            flags: {\n                reliableFlag: util.getBit(buf, off + 40, 0),\n                seekableFlag: util.getBit(buf, off + 40, 1),\n                resendLiveCleanpointsFlag: util.getBit(buf, off + 40, 2)\n            },\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n            streamNumber: view.getInt16(42, true),\n            streamLanguageId: view.getInt16(44, true),\n            averageTimePerFrame: view.getInt32(52, true),\n            streamNameCount: view.getInt32(54, true),\n            payloadExtensionSystems: view.getInt32(56, true),\n            streamNames: [], // ToDo\n            streamPropertiesObject: null\n        };\n    }\n}\nExtendedStreamPropertiesObjectState.guid = GUID.ExtendedStreamPropertiesObject;\n/**\n * 4.7  Metadata Object (optional, 0 or 1)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7\n */\nexport class MetadataObjectState extends State {\n    get(uint8Array, off) {\n        const tags = [];\n        const view = new DataView(uint8Array.buffer, off);\n        const descriptionRecordsCount = view.getUint16(0, true);\n        let pos = 2;\n        for (let i = 0; i < descriptionRecordsCount; i += 1) {\n            pos += 4;\n            const nameLen = view.getUint16(pos, true);\n            pos += 2;\n            const dataType = view.getUint16(pos, true);\n            pos += 2;\n            const dataLen = view.getUint32(pos, true);\n            pos += 4;\n            const name = parseUnicodeAttr(uint8Array.slice(off + pos, off + pos + nameLen));\n            pos += nameLen;\n            const data = uint8Array.slice(off + pos, off + pos + dataLen);\n            pos += dataLen;\n            this.postProcessTag(tags, name, dataType, data);\n        }\n        return tags;\n    }\n}\nMetadataObjectState.guid = GUID.MetadataObject;\n// 4.8\tMetadata Library Object (optional, 0 or 1)\nexport class MetadataLibraryObjectState extends MetadataObjectState {\n}\nMetadataLibraryObjectState.guid = GUID.MetadataLibraryObject;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx\n */\nexport class WmPictureToken {\n    static fromBuffer(buffer) {\n        const pic = new WmPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const view = new DataView(buffer.buffer, offset);\n        const typeId = view.getUint8(0);\n        const size = view.getInt32(1, true);\n        let index = 5;\n        while (view.getUint16(index) !== 0) {\n            index += 2;\n        }\n        const format = new Token.StringType(index - 5, 'utf-16le').get(buffer, 5);\n        while (view.getUint16(index) !== 0) {\n            index += 2;\n        }\n        const description = new Token.StringType(index - 5, 'utf-16le').get(buffer, 5);\n        return {\n            type: AttachedPictureType[typeId],\n            format,\n            description,\n            size,\n            data: buffer.slice(index + 4)\n        };\n    }\n}\n//# sourceMappingURL=AsfObject.js.map","import initDebug from 'debug';\nimport { TrackType } from '../type.js';\nimport GUID from './GUID.js';\nimport * as AsfObject from './AsfObject.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { AsfContentParseError } from './AsfObject.js';\nconst debug = initDebug('music-metadata:parser:ASF');\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01\n * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\nexport class AsfParser extends BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n        if (!header.objectId.equals(GUID.HeaderObject)) {\n            throw new AsfContentParseError(`expected asf header; but was not found; got: ${header.objectId.str}`);\n        }\n        try {\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\n        }\n        catch (err) {\n            debug('Error while parsing ASF: %s', err);\n        }\n    }\n    async parseObjectHeader(numberOfObjectHeaders) {\n        let tags;\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            // Parse data part of the ASF Object\n            debug('header GUID=%s', header.objectId.str);\n            switch (header.objectId.str) {\n                case AsfObject.FilePropertiesObject.guid.str: { // 3.2\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n                    this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n                    break;\n                }\n                case AsfObject.StreamPropertiesObject.guid.str: { // 3.3\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n                    this.metadata.setFormat('container', `ASF/${spo.streamType}`);\n                    break;\n                }\n                case AsfObject.HeaderExtensionObject.guid.str: { // 3.4\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\n                    break;\n                }\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n                    await this.addTags(tags);\n                    break;\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n                    await this.addTags(tags);\n                    break;\n                case GUID.CodecListObject.str: {\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n                    codecs.forEach(codec => {\n                        this.metadata.addStreamInfo({\n                            type: codec.type.videoCodec ? TrackType.video : TrackType.audio,\n                            codecName: codec.codecName\n                        });\n                    });\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n                    this.metadata.setFormat('codec', audioCodecs);\n                    break;\n                }\n                case GUID.StreamBitratePropertiesObject.str:\n                    // ToDo?\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                default:\n                    this.metadata.addWarning(`Ignore ASF-Object-GUID: ${header.objectId.str}`);\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n            }\n        } while (--numberOfObjectHeaders);\n        // done\n    }\n    async addTags(tags) {\n        await Promise.all(tags.map(({ id, value }) => this.metadata.addTag(headerType, id, value)));\n    }\n    async parseExtensionObject(extensionSize) {\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            const remaining = header.objectSize - AsfObject.HeaderObjectToken.len;\n            // Parse data part of the ASF Object\n            switch (header.objectId.str) {\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\n                    // ToDo: extended stream header properties are ignored\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n                    break;\n                case AsfObject.MetadataObjectState.guid.str: { // 4.7\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n                    await this.addTags(moTags);\n                    break;\n                }\n                case AsfObject.MetadataLibraryObjectState.guid.str: { // 4.8\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n                    await this.addTags(mlTags);\n                    break;\n                }\n                case GUID.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                case GUID.CompatibilityObject.str:\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                case GUID.ASF_Index_Placeholder_Object.str:\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                default:\n                    this.metadata.addWarning(`Ignore ASF-Object-GUID: ${header.objectId.str}`);\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n                    break;\n            }\n            extensionSize -= header.objectSize;\n        } while (extensionSize > 0);\n    }\n}\n//# sourceMappingURL=AsfParser.js.map"],"names":["GUID","fromBin","bin","offset","arguments","length","undefined","decode","objectId","view","DataView","buffer","concat","getUint32","toString","getUint16","uint8ArrayToHex","slice","toUpperCase","decodeMediaType","mediaType","str","AudioMedia","VideoMedia","CommandMedia","Degradable_JPEG_Media","FileTransferMedia","BinaryMedia","encode","Uint8Array","setUint32","Number","parseInt","setUint16","set","hexToUint8Array","constructor","this","equals","guid","toBin","HeaderObject","DataObject","SimpleIndexObject","IndexObject","MediaObjectIndexObject","TimecodeIndexObject","FilePropertiesObject","StreamPropertiesObject","HeaderExtensionObject","CodecListObject","ScriptCommandObject","MarkerObject","BitrateMutualExclusionObject","ErrorCorrectionObject","ContentDescriptionObject","ExtendedContentDescriptionObject","ContentBrandingObject","StreamBitratePropertiesObject","ContentEncryptionObject","ExtendedContentEncryptionObject","DigitalSignatureObject","PaddingObject","ExtendedStreamPropertiesObject","AdvancedMutualExclusionObject","GroupMutualExclusionObject","StreamPrioritizationObject","BandwidthSharingObject","LanguageListObject","MetadataObject","MetadataLibraryObject","IndexParametersObject","MediaObjectIndexParametersObject","TimecodeIndexParametersObject","CompatibilityObject","AdvancedContentEncryptionObject","JFIF_Media","ASF_Index_Placeholder_Object","parseUnicodeAttr","uint8Array","util","attributeParsers","parseByteArrayAttr","buf","parseWordAttr","Token","get","AsfContentParseError","makeUnexpectedFileContentError","TopLevelHeaderObjectToken","len","off","objectSize","numberOfHeaderObjects","HeaderObjectToken","State","header","postProcessTag","tags","name","valueType","data","push","id","value","WmPictureToken","fromBuffer","parseAttr","IgnoreObjectState","fileId","fileSize","creationDate","dataPacketsCount","playDuration","sendDuration","preroll","flags","broadcast","seekable","minimumDataPacketSize","maximumDataPacketSize","maximumBitrate","streamType","errorCorrectionType","reserved1","reserved2","extensionDataSize","CodecListObjectHeader","entryCount","async","readString","tokenizer","readNumber","readToken","replace","readCodecEntries","codecHeader","entries","i","readCodecEntry","readInformation","readBuffer","type","videoCodec","audioCodec","codecName","description","information","ContentDescriptionObjectState","pos","contentDescTags","tagName","end","ExtendedContentDescriptionObjectState","attrCount","nameLen","valueLen","ExtendedStreamPropertiesObjectState","startTime","endTime","dataBitrate","getInt32","bufferSize","initialBufferFullness","alternateDataBitrate","alternateBufferSize","alternateInitialBufferFullness","maximumObjectSize","reliableFlag","seekableFlag","resendLiveCleanpointsFlag","streamNumber","getInt16","streamLanguageId","averageTimePerFrame","streamNameCount","payloadExtensionSystems","streamNames","streamPropertiesObject","MetadataObjectState","descriptionRecordsCount","dataType","dataLen","MetadataLibraryObjectState","typeId","getUint8","size","index","format","AttachedPictureType","debug","initDebug","AsfParser","BasicParser","parse","AsfObject","parseObjectHeader","err","numberOfObjectHeaders","fpo","metadata","setFormat","BigInt","spo","extHeader","parseExtensionObject","addTags","codecs","forEach","codec","addStreamInfo","TrackType","video","audio","audioCodecs","filter","map","join","ignore","addWarning","Promise","all","_ref","addTag","extensionSize","remaining","moTags","mlTags"],"sourceRoot":""}