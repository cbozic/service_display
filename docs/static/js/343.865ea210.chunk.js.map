{"version":3,"file":"static/js/343.865ea210.chunk.js","mappings":"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","sources":["../node_modules/music-metadata/lib/mp4/AtomToken.js","../node_modules/music-metadata/lib/mp4/Atom.js","../node_modules/music-metadata/lib/mp4/MP4Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:MP4:atom');\nexport class Mp4ContentError extends makeUnexpectedFileContentError('MP4') {\n}\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        const length = Token.UINT32_BE.get(buf, off);\n        if (length < 0)\n            throw new Mp4ContentError('Invalid atom header length');\n        return {\n            length: BigInt(length),\n            name: new Token.StringType(4, 'latin1').get(buf, off + 4)\n        };\n    },\n    put: (buf, off, hdr) => {\n        Token.UINT32_BE.put(buf, off, Number(hdr.length));\n        return FourCcToken.put(buf, off + 4, hdr.name);\n    }\n};\n/**\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\n */\nexport const ExtendedSize = Token.UINT64_BE;\nexport const ftyp = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\nexport const tkhd = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\n/**\n * Token: Movie Header Atom\n */\nexport const mhdr = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Base class for 'fixed' length atoms.\n * In some cases these atoms are longer then the sum of the described fields.\n * Issue: https://github.com/Borewit/music-metadata/issues/120\n */\nexport class FixedLengthAtom {\n    /**\n     *\n     * @param {number} len Length as specified in the size field\n     * @param {number} expLen Total length of sum of specified fields in the standard\n     * @param atomId Atom ID\n     */\n    constructor(len, expLen, atomId) {\n        if (len < expLen) {\n            throw new Mp4ContentError(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\n        }\n        if (len > expLen) {\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\n        }\n        this.len = len;\n    }\n}\n/**\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\n */\nconst SecondsSinceMacEpoch = {\n    len: 4,\n    get: (buf, off) => {\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\n        return new Date(secondsSinceUnixEpoch * 1000);\n    }\n};\n/**\n * Token: Media Header Atom\n * Ref:\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\n */\nexport class MdhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 24, 'mdhd');\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off + 0),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            language: Token.UINT16_BE.get(buf, off + 20),\n            quality: Token.UINT16_BE.get(buf, off + 22)\n        };\n    }\n}\n/**\n * Token: Movie Header Atom\n */\nexport class MvhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 100, 'mvhd');\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\n            // ignore reserver: 10 bytes\n            // ignore matrix structure: 36 bytes\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\n        };\n    }\n}\n/**\n * Data Atom Structure\n */\nexport class DataAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            type: {\n                set: Token.UINT8.get(buf, off + 0),\n                type: Token.UINT24_BE.get(buf, off + 1)\n            },\n            locale: Token.UINT24_BE.get(buf, off + 4),\n            value: new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8)\n        };\n    }\n}\n/**\n * Data Atom Structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\n */\nexport class NameAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\n        };\n    }\n}\n/**\n * Track Header Atoms structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\n */\nexport class TrackHeaderAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            trackId: Token.UINT32_BE.get(buf, off + 12),\n            // reserved 4 bytes\n            duration: Token.UINT32_BE.get(buf, off + 20),\n            layer: Token.UINT16_BE.get(buf, off + 24),\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\n            // ToDo: add remaining fields\n        };\n    }\n}\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nconst stsdHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/documentation/quicktime-file-format/sample_description_atom\n */\nclass SampleDescriptionTable {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const descrLen = this.len - 12;\n        return {\n            dataFormat: FourCcToken.get(buf, off),\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\n            description: descrLen > 0 ? new Token.Uint8ArrayType(descrLen).get(buf, off + 12) : undefined\n        };\n    }\n}\n/**\n * Atom: Sample-description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nexport class StsdAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const header = stsdHeader.get(buf, off);\n        off += stsdHeader.len;\n        const table = [];\n        for (let n = 0; n < header.numberOfEntries; ++n) {\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\n            off += Token.UINT32_BE.len;\n            table.push(new SampleDescriptionTable(size - Token.UINT32_BE.len).get(buf, off));\n            off += size;\n        }\n        return {\n            header,\n            table\n        };\n    }\n}\n/**\n * Common Sound Sample Description (version & revision)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\n */\nexport const SoundSampleDescriptionVersion = {\n    len: 8,\n    get(buf, off) {\n        return {\n            version: Token.INT16_BE.get(buf, off),\n            revision: Token.INT16_BE.get(buf, off + 2),\n            vendor: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Sound Sample Description (Version 0)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\n */\nexport const SoundSampleDescriptionV0 = {\n    len: 12,\n    get(buf, off) {\n        return {\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\n            compressionId: Token.INT16_BE.get(buf, off + 4),\n            packetSize: Token.INT16_BE.get(buf, off + 6),\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\n        };\n    }\n};\nclass SimpleTableAtom {\n    constructor(len, token) {\n        this.len = len;\n        this.token = token;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\n        return {\n            version: Token.INT8.get(buf, off + 0),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\n        };\n    }\n}\nexport const TimeToSampleToken = {\n    len: 8,\n    get(buf, off) {\n        return {\n            count: Token.INT32_BE.get(buf, off + 0),\n            duration: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Time-to-sample('stts') atom.\n * Store duration information for a media’s samples.\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\n */\nexport class SttsAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, TimeToSampleToken);\n    }\n}\nexport const SampleToChunkToken = {\n    len: 12,\n    get(buf, off) {\n        return {\n            firstChunk: Token.INT32_BE.get(buf, off),\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\n        };\n    }\n};\n/**\n * Sample-to-Chunk ('stsc') atom interface\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\n */\nexport class StscAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, SampleToChunkToken);\n    }\n}\n/**\n * Sample-size ('stsz') atom\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\n */\nexport class StszAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\n        return {\n            version: Token.INT8.get(buf, off),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\n        };\n    }\n}\n/**\n * Chunk offset atom, 'stco'\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\n */\nexport class StcoAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, Token.INT32_BE);\n        this.len = len;\n    }\n}\n/**\n * Token used to decode text-track from 'mdat' atom (raw data stream)\n */\nexport class ChapterText {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\n        const str = new Token.StringType(titleLen, 'utf-8');\n        return str.get(buf, off + 2);\n    }\n}\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\n    if (remainingLen === 0)\n        return [];\n    if (remainingLen !== numberOfEntries * token.len)\n        throw new Mp4ContentError('mismatch number-of-entries with remaining atom-length');\n    const entries = [];\n    // parse offset-table\n    for (let n = 0; n < numberOfEntries; ++n) {\n        entries.push(token.get(buf, off));\n        off += token.len;\n    }\n    return entries;\n}\n//# sourceMappingURL=AtomToken.js.map","import initDebug from 'debug';\nimport * as AtomToken from './AtomToken.js';\nimport { Header } from './AtomToken.js';\nconst debug = initDebug('music-metadata:parser:MP4:Atom');\nexport class Atom {\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\n        // Parse atom header\n        const offset = tokenizer.position;\n        debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\n        const header = await tokenizer.readToken(AtomToken.Header);\n        const extended = header.length === 1n;\n        if (extended) {\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\n        }\n        const atomBean = new Atom(header, extended, parent);\n        const payloadLength = atomBean.getPayloadLength(remaining);\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\n        return atomBean;\n    }\n    constructor(header, extended, parent) {\n        this.header = header;\n        this.extended = extended;\n        this.parent = parent;\n        this.children = [];\n        this.atomPath = (this.parent ? `${this.parent.atomPath}.` : '') + this.header.name;\n    }\n    getHeaderLength() {\n        return this.extended ? 16 : 8;\n    }\n    getPayloadLength(remaining) {\n        return (this.header.length === 0n ? remaining : Number(this.header.length)) - this.getHeaderLength();\n    }\n    async readAtoms(tokenizer, dataHandler, size) {\n        while (size > 0) {\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\n            this.children.push(atomBean);\n            size -= atomBean.header.length === 0n ? size : Number(atomBean.header.length);\n        }\n    }\n    async readData(tokenizer, dataHandler, remaining) {\n        switch (this.header.name) {\n            // \"Container\" atoms, contains nested atoms\n            case 'moov': // The Movie Atom: contains other atoms\n            case 'udta': // User defined atom\n            case 'trak':\n            case 'mdia': // Media atom\n            case 'minf': // Media Information Atom\n            case 'stbl': // The Sample Table Atom\n            case '<id>':\n            case 'ilst':\n            case 'tref':\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\n            case 'meta': { // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n                // meta has 4 bytes of padding, ignore\n                const peekHeader = await tokenizer.peekToken(Header);\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\n                await tokenizer.ignore(paddingLength);\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\n            }\n            default:\n                return dataHandler(this, remaining);\n        }\n    }\n}\n//# sourceMappingURL=Atom.js.map","import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { Atom } from './Atom.js';\nimport * as AtomToken from './AtomToken.js';\nimport { Mp4ContentError } from './AtomToken.js';\nimport { TrackType } from '../type.js';\nimport { uint8ArrayToHex, uint8ArrayToString } from 'uint8array-extras';\nconst debug = initDebug('music-metadata:parser:MP4');\nconst tagFormat = 'iTunes';\nconst encoderDict = {\n    raw: {\n        lossy: false,\n        format: 'raw'\n    },\n    MAC3: {\n        lossy: true,\n        format: 'MACE 3:1'\n    },\n    MAC6: {\n        lossy: true,\n        format: 'MACE 6:1'\n    },\n    ima4: {\n        lossy: true,\n        format: 'IMA 4:1'\n    },\n    ulaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    alaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    Qclp: {\n        lossy: true,\n        format: 'QUALCOMM PureVoice'\n    },\n    '.mp3': {\n        lossy: true,\n        format: 'MPEG-1 layer 3'\n    },\n    alac: {\n        lossy: false,\n        format: 'ALAC'\n    },\n    'ac-3': {\n        lossy: true,\n        format: 'AC-3'\n    },\n    mp4a: {\n        lossy: true,\n        format: 'MPEG-4/AAC'\n    },\n    mp4s: {\n        lossy: true,\n        format: 'MP4S'\n    },\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\n    c608: {\n        lossy: true,\n        format: 'CEA-608'\n    },\n    c708: {\n        lossy: true,\n        format: 'CEA-708'\n    }\n};\nfunction distinct(value, index, self) {\n    return self.indexOf(value) === index;\n}\n/*\n * Parser for the MP4 (MPEG-4 Part 14) container format\n * Standard: ISO/IEC 14496-14\n * supporting:\n * - QuickTime container\n * - MP4 File Format\n * - 3GPP file format\n * - 3GPP2 file format\n *\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\n * Support for Apple iTunes tags as found in a M4A/M4V files.\n * Ref:\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\n */\nexport class MP4Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.tracks = [];\n        this.atomParsers = {\n            /**\n             * Parse movie header (mvhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\n             */\n            mvhd: async (len) => {\n                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\n            },\n            /**\n             * Parse media header (mdhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\n             */\n            mdhd: async (len) => {\n                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\n                const td = this.getTrackDescription();\n                td.creationTime = mdhd_data.creationTime;\n                td.modificationTime = mdhd_data.modificationTime;\n                td.timeScale = mdhd_data.timeScale;\n                td.duration = mdhd_data.duration;\n            },\n            chap: async (len) => {\n                const td = this.getTrackDescription();\n                const trackIds = [];\n                while (len >= Token.UINT32_BE.len) {\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\n                    len -= Token.UINT32_BE.len;\n                }\n                td.chapterList = trackIds;\n            },\n            tkhd: async (len) => {\n                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));\n                this.tracks.push(track);\n            },\n            /**\n             * Parse mdat atom.\n             * Will scan for chapters\n             */\n            mdat: async (len) => {\n                this.audioLengthInBytes = len;\n                this.calculateBitRate();\n                if (this.options.includeChapters) {\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\n                    if (trackWithChapters.length === 1) {\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\n                        if (chapterTracks.length === 1) {\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\n                        }\n                    }\n                }\n                await this.tokenizer.ignore(len);\n            },\n            ftyp: async (len) => {\n                const types = [];\n                while (len > 0) {\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\n                    len -= AtomToken.ftyp.len;\n                    const value = ftype.type.replace(/\\W/g, '');\n                    if (value.length > 0) {\n                        types.push(value); // unshift for backward compatibility\n                    }\n                }\n                debug(`ftyp: ${types.join('/')}`);\n                const x = types.filter(distinct).join('/');\n                this.metadata.setFormat('container', x);\n            },\n            /**\n             * Parse sample description atom\n             */\n            stsd: async (len) => {\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\n                const trackDescription = this.getTrackDescription();\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n            },\n            /**\n             * sample-to-Chunk Atoms\n             */\n            stsc: async (len) => {\n                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\n            },\n            /**\n             * time-to-sample table\n             */\n            stts: async (len) => {\n                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));\n                this.getTrackDescription().timeToSampleTable = stts.entries;\n            },\n            /**\n             * Parse sample-sizes atom ('stsz')\n             */\n            stsz: async (len) => {\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\n                const td = this.getTrackDescription();\n                td.sampleSize = stsz.sampleSize;\n                td.sampleSizeTable = stsz.entries;\n            },\n            /**\n             * Parse chunk-offset atom ('stco')\n             */\n            stco: async (len) => {\n                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\n            },\n            date: async (len) => {\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\n                await this.addTag('date', date);\n            }\n        };\n    }\n    static read_BE_Integer(array, signed) {\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\n        const token = Token[integerType];\n        if (!token) {\n            throw new Mp4ContentError(`Token for integer type not found: \"${integerType}\"`);\n        }\n        return Number(token.get(array, 0));\n    }\n    async parse() {\n        this.tracks = [];\n        let remainingFileSize = this.tokenizer.fileInfo.size || 0;\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\n            try {\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\n                if (token.name === '\\0\\0\\0\\0') {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                    break;\n                }\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                }\n                else\n                    throw error;\n                break;\n            }\n            const rootAtom = await Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\n        }\n        // Post process metadata\n        const formatList = [];\n        this.tracks.forEach(track => {\n            const trackFormats = [];\n            track.soundSampleDescription.forEach(ssd => {\n                const streamInfo = {};\n                const encoderInfo = encoderDict[ssd.dataFormat];\n                if (encoderInfo) {\n                    trackFormats.push(encoderInfo.format);\n                    streamInfo.codecName = encoderInfo.format;\n                }\n                else {\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\n                }\n                if (ssd.description) {\n                    const { description } = ssd;\n                    if (description.sampleRate > 0) {\n                        streamInfo.type = TrackType.audio;\n                        streamInfo.audio = {\n                            samplingFrequency: description.sampleRate,\n                            bitDepth: description.sampleSize,\n                            channels: description.numAudioChannels\n                        };\n                    }\n                }\n                this.metadata.addStreamInfo(streamInfo);\n            });\n            if (trackFormats.length >= 1) {\n                formatList.push(trackFormats.join('/'));\n            }\n        });\n        if (formatList.length > 0) {\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\n        }\n        const audioTracks = this.tracks.filter(track => {\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\n        });\n        if (audioTracks.length >= 1) {\n            const audioTrack = audioTracks[0];\n            if (audioTrack.timeScale > 0) {\n                const duration = audioTrack.duration / audioTrack.timeScale; // calculate duration in seconds\n                this.metadata.setFormat('duration', duration);\n            }\n            const ssd = audioTrack.soundSampleDescription[0];\n            if (ssd.description) {\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\n                if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {\n                    const totalSampleSize = audioTrack.timeToSampleTable\n                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)\n                        .reduce((total, sampleSize) => total + sampleSize);\n                    const duration = totalSampleSize / ssd.description.sampleRate;\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const encoderInfo = encoderDict[ssd.dataFormat];\n            if (encoderInfo) {\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\n            }\n            this.calculateBitRate();\n        }\n    }\n    async handleAtom(atom, remaining) {\n        if (atom.parent) {\n            switch (atom.parent.header.name) {\n                case 'ilst':\n                case '<id>':\n                    return this.parseMetadataItemData(atom);\n            }\n        }\n        // const payloadLength = atom.getPayloadLength(remaining);\n        if (this.atomParsers[atom.header.name]) {\n            return this.atomParsers[atom.header.name](remaining);\n        }\n        debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\n        await this.tokenizer.ignore(remaining);\n    }\n    getTrackDescription() {\n        return this.tracks[this.tracks.length - 1];\n    }\n    calculateBitRate() {\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\n        }\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(tagFormat, id, value);\n    }\n    addWarning(message) {\n        debug(`Warning: ${message}`);\n        this.metadata.addWarning(message);\n    }\n    /**\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\n     * @param metaAtom\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n     */\n    parseMetadataItemData(metaAtom) {\n        let tagKey = metaAtom.header.name;\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'data': // value atom\n                    return this.parseValueAtom(tagKey, child);\n                case 'name': // name atom (optional)\n                case 'mean':\n                case 'rate': {\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\n                    tagKey += `:${name.name}`;\n                    break;\n                }\n                default: {\n                    const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(payLoadLength));\n                    this.addWarning(`Unsupported meta-item: ${tagKey}[${child.header.name}] => value=${uint8ArrayToHex(uint8Array)} ascii=${uint8ArrayToString(uint8Array, 'ascii')}`);\n                }\n            }\n        }, metaAtom.getPayloadLength(0));\n    }\n    async parseValueAtom(tagKey, metaAtom) {\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));\n        if (dataAtom.type.set !== 0) {\n            throw new Mp4ContentError(`Unsupported type-set != 0: ${dataAtom.type.set}`);\n        }\n        // Use well-known-type table\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\n        switch (dataAtom.type.type) {\n            case 0: // reserved: Reserved for use where no type needs to be indicated\n                switch (tagKey) {\n                    case 'trkn':\n                    case 'disk': {\n                        const num = Token.UINT8.get(dataAtom.value, 3);\n                        const of = Token.UINT8.get(dataAtom.value, 5);\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\n                        await this.addTag(tagKey, `${num}/${of}`);\n                        break;\n                    }\n                    case 'gnre': {\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\n                        const genreStr = Genres[genreInt - 1];\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\n                        await this.addTag(tagKey, genreStr);\n                        break;\n                    }\n                    case 'rate': {\n                        const rate = new TextDecoder('ascii').decode(dataAtom.value);\n                        await this.addTag(tagKey, rate);\n                        break;\n                    }\n                    default:\n                        debug(`unknown proprietary value type for: ${metaAtom.atomPath}`);\n                }\n                break;\n            case 1: // UTF-8: Without any count or NULL terminator\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\n                await this.addTag(tagKey, new TextDecoder('utf-8').decode(dataAtom.value));\n                break;\n            case 13: // JPEG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/jpeg',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 14: // PNG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/png',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 21: // BE Signed Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\n                break;\n            case 22: // BE Unsigned Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\n                break;\n            case 65: // An 8-bit signed integer\n                await this.addTag(tagKey, Token.UINT8.get(dataAtom.value, 0));\n                break;\n            case 66: // A big-endian 16-bit signed integer\n                await this.addTag(tagKey, Token.UINT16_BE.get(dataAtom.value, 0));\n                break;\n            case 67: // A big-endian 32-bit signed integer\n                await this.addTag(tagKey, Token.UINT32_BE.get(dataAtom.value, 0));\n                break;\n            default:\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\n        }\n    }\n    /**\n     * @param sampleDescription\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\n     */\n    parseSoundSampleDescription(sampleDescription) {\n        const ssd = {\n            dataFormat: sampleDescription.dataFormat,\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\n        };\n        let offset = 0;\n        if (sampleDescription.description) {\n            const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\n            offset += AtomToken.SoundSampleDescriptionVersion.len;\n            if (version.version === 0 || version.version === 1) {\n                // Sound Sample Description (Version 0)\n                ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\n            }\n            else {\n                debug(`Warning: sound-sample-description ${version} not implemented`);\n            }\n        }\n        return ssd;\n    }\n    async parseChapterTrack(chapterTrack, track, len) {\n        if (!chapterTrack.sampleSize) {\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\n        }\n        const chapters = [];\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\n            const start = chapterTrack.timeToSampleTable\n                .slice(0, i)\n                .reduce((acc, cur) => acc + cur.duration, 0);\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\n            len -= nextChunkLen + sampleSize;\n            if (len < 0)\n                throw new Mp4ContentError('Chapter chunk exceeding token length');\n            await this.tokenizer.ignore(nextChunkLen);\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\n            debug(`Chapter ${i + 1}: ${title}`);\n            const chapter = {\n                title,\n                timeScale: chapterTrack.timeScale,\n                start,\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\n            };\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\n            chapters.push(chapter);\n        }\n        this.metadata.setFormat('chapters', chapters);\n        await this.tokenizer.ignore(len);\n    }\n    findSampleOffset(track, chapterOffset) {\n        let totalDuration = 0;\n        track.timeToSampleTable.forEach(e => {\n            totalDuration += e.count * e.duration;\n        });\n        debug(`Total duration=${totalDuration}`);\n        let chunkIndex = 0;\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\n            ++chunkIndex;\n        }\n        return this.getChunkDuration(chunkIndex + 1, track);\n    }\n    getChunkDuration(chunkId, track) {\n        let ttsi = 0;\n        let ttsc = track.timeToSampleTable[ttsi].count;\n        let ttsd = track.timeToSampleTable[ttsi].duration;\n        let curChunkId = 1;\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n        let totalDuration = 0;\n        while (curChunkId < chunkId) {\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\n            totalDuration += nrOfSamples * ttsd;\n            ttsc -= nrOfSamples;\n            samplesPerChunk -= nrOfSamples;\n            if (samplesPerChunk === 0) {\n                ++curChunkId;\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n            }\n            else {\n                ++ttsi;\n                ttsc = track.timeToSampleTable[ttsi].count;\n                ttsd = track.timeToSampleTable[ttsi].duration;\n            }\n        }\n        return totalDuration;\n    }\n    getSamplesPerChunk(chunkId, stcTable) {\n        for (let i = 0; i < stcTable.length - 1; ++i) {\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\n                return stcTable[i].samplesPerChunk;\n            }\n        }\n        return stcTable[stcTable.length - 1].samplesPerChunk;\n    }\n}\n//# sourceMappingURL=MP4Parser.js.map"],"names":["debug","initDebug","Mp4ContentError","makeUnexpectedFileContentError","Header","len","get","buf","off","length","Token","BigInt","name","put","hdr","Number","FourCcToken","ExtendedSize","ftyp","type","FixedLengthAtom","constructor","expLen","atomId","this","SecondsSinceMacEpoch","secondsSinceUnixEpoch","Date","MdhdAtom","super","version","flags","creationTime","modificationTime","timeScale","duration","language","quality","MvhdAtom","preferredRate","preferredVolume","previewTime","previewDuration","posterTime","selectionTime","selectionDuration","currentTime","nextTrackID","DataAtom","set","locale","value","NameAtom","TrackHeaderAtom","trackId","layer","alternateGroup","volume","stsdHeader","numberOfEntries","SampleDescriptionTable","descrLen","dataFormat","dataReferenceIndex","description","undefined","StsdAtom","header","table","n","size","push","SoundSampleDescriptionVersion","revision","vendor","SoundSampleDescriptionV0","numAudioChannels","sampleSize","compressionId","packetSize","sampleRate","SimpleTableAtom","token","nrOfEntries","entries","readTokenTable","TimeToSampleToken","count","SttsAtom","SampleToChunkToken","firstChunk","samplesPerChunk","sampleDescriptionId","StscAtom","StszAtom","StcoAtom","ChapterText","titleLen","remainingLen","Atom","readAtom","tokenizer","dataHandler","parent","remaining","offset","position","readToken","AtomToken","extended","atomBean","payloadLength","getPayloadLength","atomPath","readData","children","getHeaderLength","readAtoms","paddingLength","peekToken","ignore","encoderDict","raw","lossy","format","MAC3","MAC6","ima4","ulaw","alaw","Qclp","alac","mp4a","mp4s","c608","c708","distinct","index","self","indexOf","MP4Parser","BasicParser","arguments","tracks","atomParsers","mvhd","async","metadata","setFormat","mdhd","mdhd_data","td","getTrackDescription","chap","trackIds","readNumber","chapterList","tkhd","track","mdat","audioLengthInBytes","calculateBitRate","options","includeChapters","trackWithChapters","filter","chapterTrackIds","chapterTracks","parseChapterTrack","types","ftype","replace","join","x","stsd","soundSampleDescription","map","dfEntry","parseSoundSampleDescription","stsc","sampleToChunkTable","stts","timeToSampleTable","stsz","sampleSizeTable","stco","chunkOffsetTable","date","addTag","read_BE_Integer","array","signed","integerType","parse","remainingFileSize","fileInfo","errMsg","addWarning","error","Error","message","rootAtom","atom","handleAtom","formatList","forEach","trackFormats","ssd","streamInfo","encoderInfo","codecName","TrackType","audio","samplingFrequency","bitDepth","channels","addStreamInfo","audioTracks","audioTrack","ttstEntry","reduce","total","parseMetadataItemData","id","metaAtom","tagKey","child","payLoadLength","parseValueAtom","uint8Array","uint8ArrayToHex","uint8ArrayToString","dataAtom","num","of","genreInt","genreStr","Genres","rate","TextDecoder","decode","skipCovers","data","Uint8Array","from","sampleDescription","chapterTrack","chapters","i","start","slice","acc","cur","nextChunkLen","title","chapter","sampleOffset","findSampleOffset","chapterOffset","totalDuration","e","chunkIndex","getChunkDuration","chunkId","ttsi","ttsc","ttsd","curChunkId","getSamplesPerChunk","nrOfSamples","Math","min","stcTable"],"sourceRoot":""}